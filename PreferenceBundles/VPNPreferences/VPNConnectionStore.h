/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:39:15 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PreferenceBundles/VPNPreferences.bundle/VPNPreferences
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <VPNPreferences/VPNPreferences-Structs.h>
@class VPNConnection, NSString, NSMutableArray, NSMutableDictionary, NSArray, NEConfigurationManager, NSObject;

@interface VPNConnectionStore : NSObject {

	char _gradeCurrentConnectionHasBeenSet[4];
	VPNConnection* _gradeCurrentConnection[4];
	NSString* _gradeActiveVPNID[4];
	char _gradeActiveVPNIDLoaded[4];
	NSMutableArray* _gradeVPNServiceIDs[4];
	NSMutableDictionary* _connectionDict[4];
	char _ignoreVPNChangedNotification;
	NSMutableArray* _vpnServices;
	NSArray* _managedServices;
	char _useNEVPN;
	NSArray* _configurations;
	NEConfigurationManager* _configurationManager;
	NSObject*<OS_dispatch_queue> _storeQueue;
	unsigned _vpnServiceCountDirty;
	unsigned _vpnServiceCount;

}

@property (assign) char useNEVPN;                                              //@synthesize useNEVPN=_useNEVPN - In the implementation block
@property (retain) NSArray * configurations;                                   //@synthesize configurations=_configurations - In the implementation block
@property (retain) NEConfigurationManager * configurationManager;              //@synthesize configurationManager=_configurationManager - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> storeQueue;                    //@synthesize storeQueue=_storeQueue - In the implementation block
@property (assign) unsigned vpnServiceCountDirty;                              //@synthesize vpnServiceCountDirty=_vpnServiceCountDirty - In the implementation block
@property (assign) unsigned vpnServiceCount;                                   //@synthesize vpnServiceCount=_vpnServiceCount - In the implementation block
+(id)sharedInstance;
+(CFStringRef)vpnTypeFromConnectionType:(int)arg1 ;
+(int)connectionTypeFromVPNType:(CFStringRef)arg1 ;
-(NSArray *)configurations;
-(NEConfigurationManager *)configurationManager;
-(void)setConfigurations:(NSArray *)arg1 ;
-(void)dealloc;
-(id)init;
-(id)proxyType:(SCNetworkServiceRef)arg1 ;
-(id)proxyServer:(SCNetworkServiceRef)arg1 ;
-(id)proxyPort:(SCNetworkServiceRef)arg1 ;
-(id)proxyUsername:(SCNetworkServiceRef)arg1 ;
-(id)proxyPassword:(SCNetworkServiceRef)arg1 ;
-(id)proxyPacFile:(SCNetworkServiceRef)arg1 ;
-(id)connectionWithServiceID:(id)arg1 withGrade:(unsigned)arg2 ;
-(char)useNEVPN;
-(char)isOnDemandCapableForServiceID:(id)arg1 ;
-(id)getLastConnectionCauseForServiceID:(id)arg1 ;
-(id)servicePasswordForServiceID:(id)arg1 ;
-(void)setUseNEVPN:(char)arg1 ;
-(id)currentConnectionWithGrade:(unsigned)arg1 ;
-(id)activeVPNIDWithGrade:(unsigned)arg1 ;
-(id)vpnServiceCountWithGrade:(unsigned)arg1 ;
-(void)freeResources;
-(id)vpnServicesForCurrentSetWithGrade:(unsigned)arg1 ;
-(char)isActiveVPNID:(id)arg1 withGrade:(unsigned)arg2 ;
-(char)isUserCreatedVPN:(id)arg1 ;
-(id)organizationForServiceID:(id)arg1 ;
-(void)setActiveVPNID:(id)arg1 withGrade:(unsigned)arg2 ;
-(id)optionsForServiceID:(id)arg1 withGrade:(unsigned)arg2 ;
-(void)_configurationChanged;
-(void)setVpnServiceCountDirty:(unsigned)arg1 ;
-(NSObject*<OS_dispatch_queue>)storeQueue;
-(id)currentConnectionsWithGrade:(unsigned)arg1 ;
-(int)aggregateStatus;
-(id)aggregateAlert;
-(id)vpnServiceTotalCount;
-(void)_connectionsChanged;
-(id)activeVPNIDsWithGrade:(unsigned)arg1 ;
-(id)currentConnection:(char)arg1 withGrade:(unsigned)arg2 ;
-(id)currentAppVPNConnections:(char)arg1 ;
-(char)setOnDemandEnabled:(id)arg1 onService:(SCNetworkServiceRef)arg2 forVPNType:(int)arg3 ;
-(char)setDisplayName:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setAuthorizationName:(id)arg1 ofService:(SCNetworkServiceRef)arg2 type:(int)arg3 ;
-(char)setRemoteAddress:(id)arg1 ofService:(SCNetworkServiceRef)arg2 vpnType:(int)arg3 ;
-(char)setSharedSecret:(id)arg1 onService:(SCNetworkServiceRef)arg2 type:(int)arg3 ;
-(char)setRSASecurID:(char)arg1 onService:(SCNetworkServiceRef)arg2 vpnType:(int)arg3 ;
-(char)setEncryptionLevel:(id)arg1 onService:(SCNetworkServiceRef)arg2 vpnType:(int)arg3 ;
-(char)setGroupName:(id)arg1 onService:(SCNetworkServiceRef)arg2 vpnType:(int)arg3 ;
-(char)setPassword:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setSendAllTraffice:(char)arg1 onService:(SCNetworkServiceRef)arg2 usingPreferences:(SCPreferencesRef)arg3 ;
-(char)setCertificate:(void*)arg1 onService:(SCNetworkServiceRef)arg2 vpnType:(int)arg3 ;
-(char)setProxyType:(int)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setProxyServer:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setProxyPort:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setProxyPacFile:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setProxyAuthenticate:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setProxyUsername:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setProxyPassword:(id)arg1 onService:(SCNetworkServiceRef)arg2 ;
-(char)setOptions:(id)arg1 toConfiguration:(id)arg2 ;
-(char)setOptions:(id)arg1 toService:(SCNetworkServiceRef)arg2 withPreferences:(SCPreferencesRef)arg3 vpnType:(int)arg4 serviceId:(id)arg5 ;
-(void)removeConnection:(id)arg1 withGrade:(unsigned)arg2 ;
-(id)serviceAuthorizationName:(SCNetworkServiceRef)arg1 vpnType:(int)arg2 ;
-(id)serviceRemoteAddress:(SCNetworkServiceRef)arg1 vpnType:(int)arg2 ;
-(id)serviceDisplayName:(SCNetworkServiceRef)arg1 ;
-(id)serviceSharedSecret:(SCNetworkServiceRef)arg1 vpnType:(int)arg2 ;
-(char)serviceUsesRSASecurID:(SCNetworkServiceRef)arg1 vpnType:(int)arg2 ;
-(id)serviceEncryptionLevel:(SCNetworkServiceRef)arg1 vpnType:(int)arg2 ;
-(id)serviceGroupName:(SCNetworkServiceRef)arg1 vpnType:(int)arg2 ;
-(char)serviceRequiresPassword:(SCNetworkServiceRef)arg1 ;
-(id)servicePassword:(SCNetworkServiceRef)arg1 ;
-(void*)certificate:(SCNetworkServiceRef)arg1 vpnType:(int)arg2 ;
-(char)serviceSendsAllTraffic:(SCNetworkServiceRef)arg1 usingPreferences:(SCPreferencesRef)arg2 ;
-(id)proxyAuthenticate:(SCNetworkServiceRef)arg1 ;
-(char)isOnDemandCapable:(SCNetworkServiceRef)arg1 ;
-(char)onDemandEnabled:(SCNetworkServiceRef)arg1 forVPNType:(int)arg2 ;
-(id)appNameForServiceID:(id)arg1 withGrade:(unsigned)arg2 ;
-(char)saveActiveVPNIDToPreferences:(id)arg1 withGrade:(unsigned)arg2 ;
-(id)copyActiveVPNIDsFromPrefsForGrade:(unsigned)arg1 ;
-(id)organizationForService:(SCNetworkServiceRef)arg1 ;
-(int)vpnTypeForServiceID:(id)arg1 ;
-(id)aggregateStatusText;
-(unsigned)currentOnlyConnectionGrade;
-(id)_defaultDictForType:(int)arg1 ;
-(char)createVPNWithOptions:(id)arg1 ;
-(char)updateVPNWithServiceID:(id)arg1 withOptions:(id)arg2 withGrade:(unsigned)arg3 ;
-(char)deleteVPNWithServiceID:(id)arg1 withGrade:(unsigned)arg2 ;
-(void)reloadVPN;
-(char)alwaysOnToggleEnabledForServiceID:(id)arg1 ;
-(id)getProfileIDForServiceID:(id)arg1 ;
-(id)getPayloadDictForServiceID:(id)arg1 ;
-(char)gradePresent:(unsigned)arg1 ;
-(id)sslTypeForServiceID:(id)arg1 ;
-(char)enable:(char)arg1 serviceID:(id)arg2 withGrade:(unsigned)arg3 ;
-(char)isTypeEnabledWithServiceID:(id)arg1 withGrade:(unsigned)arg2 ;
-(char)isEnabledWithServiceID:(id)arg1 withGrade:(unsigned)arg2 ;
-(void)setConfigurationManager:(NEConfigurationManager *)arg1 ;
-(void)setStoreQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(unsigned)vpnServiceCountDirty;
-(unsigned)vpnServiceCount;
-(void)setVpnServiceCount:(unsigned)arg1 ;
-(void)setPassword:(id)arg1 forServiceName:(id)arg2 accountName:(id)arg3 ;
-(id)_passwordForGenericAccount:(id)arg1 service:(id)arg2 ;
-(char)_setPlistInformation:(id)arg1 intoVPNService:(SCNetworkServiceRef)arg2 vpnType:(int)arg3 ;
-(id)queue;
-(id)passwordForServiceName:(id)arg1 accountName:(id)arg2 ;
-(void)removePasswordForServiceName:(id)arg1 accountName:(id)arg2 ;
@end

