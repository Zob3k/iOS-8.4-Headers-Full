/*
* This header is generated by classdump-dyld 0.7
* on Monday, July 6, 2015 at 12:14:54 AM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/CoreServices/SpringBoard.app/SpringBoard
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <SpringBoard/SpringBoard-Structs.h>
#import <UIKit/UIViewController.h>
#import <SpringBoard/SBLockScreenNotificationViewDelegate.h>
#import <SpringBoard/SBLockScreenNotificationModel.h>
#import <SpringBoard/BBObserverDelegate.h>
#import <SpringBoard/SBVolumePressBandit.h>
#import <SpringBoard/SBUIBannerSource.h>
#import <SpringBoard/SBUIBannerTargetManagerObserver.h>
#import <SpringBoard/SBLockScreenActionHandler.h>
#import <SpringBoard/SBLockScreenNotificationBannerItemDelegate.h>
#import <SpringBoard/SBPresentingDelegate.h>
#import <SpringBoard/SBCoordinatedPresenting.h>
#import <SpringBoard/SBMotionGestureObserver.h>

@protocol SBLockScreenNotificationListDelegate, SBUIBannerTarget, SBPresentingDelegate;
@class SBLockScreenNotificationListView, BBObserver, NSMutableArray, BSSerializedRequestQueue, SBLockScreenActionContext, SBAwayViewPluginController, SBLockScreenBounceAnimator, SBLockScreenNotificationCell, NSString, NSSet;

@interface SBLockScreenNotificationListController : UIViewController <SBLockScreenNotificationViewDelegate, SBLockScreenNotificationModel, BBObserverDelegate, SBVolumePressBandit, SBUIBannerSource, SBUIBannerTargetManagerObserver, SBLockScreenActionHandler, SBLockScreenNotificationBannerItemDelegate, SBPresentingDelegate, SBCoordinatedPresenting, SBMotionGestureObserver> {

	SBLockScreenNotificationListView* _notificationView;
	id<SBLockScreenNotificationListDelegate> _delegate;
	BBObserver* _observer;
	NSMutableArray* _listItems;
	NSMutableArray* _realertTimers;
	BSSerializedRequestQueue* _bulletinRequestQueue;
	char _hibernating;
	char _quietModeEnabled;
	/*^block*/id _deferredModelUpdateBlock;
	char _hasDeferredUpdateToClearListItems;
	SBLockScreenActionContext* _actionContext;
	id<SBUIBannerTarget> _bannerTarget;
	NSMutableArray* _listItemsBannerQueue;
	SBAwayViewPluginController* _activePlugin;
	char _isOnscreen;
	char _hasMissedUnreadNotifications;
	int _messagePrivacyRevealState;
	id<SBPresentingDelegate> _presentingDelegate;
	SBLockScreenBounceAnimator* _bounceAnimator;
	SBLockScreenNotificationCell* _hintingCell;
	CGPoint _hintingCellOriginalOffset;
	char _hasAnyContent;

}

@property (assign,nonatomic) id<SBLockScreenNotificationListDelegate> delegate;                //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) char hasAnyContent;                                               //@synthesize hasAnyContent=_hasAnyContent - In the implementation block
@property (nonatomic,retain) SBLockScreenActionContext * lockScreenActionContext;              //@synthesize actionContext=_actionContext - In the implementation block
@property (nonatomic,readonly) char quietModeEnabled;                                          //@synthesize quietModeEnabled=_quietModeEnabled - In the implementation block
@property (getter=isUsingBanners,nonatomic,readonly) char usingBanners; 
@property (nonatomic,retain) SBAwayViewPluginController * activePlugin;                        //@synthesize activePlugin=_activePlugin - In the implementation block
@property (assign,nonatomic) char isHibernating;                                               //@synthesize hibernating=_hibernating - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) int coordinatedPresentingControllerIdentifier; 
@property (nonatomic,readonly) float hintDisplacement; 
@property (nonatomic,readonly) unsigned hintEdge; 
@property (assign,nonatomic) id<SBPresentingDelegate> presentingDelegate; 
@property (nonatomic,readonly) NSSet * gestures; 
@property (nonatomic,readonly) NSSet * conflictingGestures; 
@property (nonatomic,readonly) NSSet * tapExcludedViews; 
+(id)underlayPropertiesFactory;
-(void)beginPresentationWithTouchLocation:(CGPoint)arg1 ;
-(void)setInScreenOffMode:(char)arg1 ;
-(void)handleVolumeIncrease;
-(void)handleVolumeDecrease;
-(char)activateAlertItem:(id)arg1 animated:(char)arg2 ;
-(void)deactivateAlertItem:(id)arg1 animated:(char)arg2 ;
-(SBLockScreenActionContext *)lockScreenActionContext;
-(void)_addBounceAnimator;
-(char)presentingController:(id)arg1 gestureRecognizerShouldBegin:(id)arg2 ;
-(void)presentingControllerDidFinishPresentation:(id)arg1 ;
-(NSSet *)gestures;
-(NSSet *)tapExcludedViews;
-(void)cancelGestureRecognizer:(id)arg1 ;
-(void)reenableGestureRecognizer:(id)arg1 ;
-(char)presentingController:(id)arg1 gestureRecognizer:(id)arg2 shouldReceiveTouch:(id)arg3 ;
-(void)presentingController:(id)arg1 willHandleGesture:(id)arg2 ;
-(char)isPresentingControllerTransitioning;
-(void)endTransitionWithVelocity:(CGPoint)arg1 wasCancelled:(char)arg2 completion:(/*^block*/id)arg3 ;
-(void)abortAnimatedTransition;
-(char)shouldBeginHintForGesture:(id)arg1 ;
-(int)coordinatedPresentingControllerIdentifier;
-(float)hintDisplacement;
-(unsigned)hintEdge;
-(NSSet *)conflictingGestures;
-(void)bannerItemWasTapped:(id)arg1 ;
-(void)handleLockScreenActionWithContext:(id)arg1 ;
-(void)setLockScreenActionContext:(SBLockScreenActionContext *)arg1 ;
-(char)shouldPlaySoundForItem:(id)arg1 ;
-(void)_updateMotionGestureObservation;
-(void)didReceiveRaiseGesture;
-(SBAwayViewPluginController *)activePlugin;
-(void)_hardwareButtonPressed:(id)arg1 ;
-(void)_reloadVolumePressBanditPreference;
-(void)setActivePlugin:(SBAwayViewPluginController *)arg1 ;
-(void)_setDeferredModelUpdateBlock:(/*^block*/id)arg1 ;
-(void)_killRealerts:(id)arg1 ;
-(void)killBulletinSounds;
-(void)setIsHibernating:(char)arg1 ;
-(void)prepareForTeardown;
-(id)cellAtTouchLocation:(CGPoint)arg1 ;
-(id)_firstItemWantingFullscreenPresentation;
-(char)isUsingBanners;
-(void)_presentFullscreenBulletinAlertIfNeeded;
-(void)concealForChangeInMessagePrivacy;
-(id)_newItemForBulletin:(id)arg1 shouldPlayLightsAndSirens:(char)arg2 ;
-(char)_shouldCacheBannerForBulletin:(id)arg1 ;
-(void)_addItem:(id)arg1 forBulletin:(id)arg2 playLightsAndSirens:(char)arg3 withReply:(/*^block*/id)arg4 ;
-(id)_listItemContainingBulletinID:(id)arg1 ;
-(id)_coalescableListItemForNewBulletin:(id)arg1 ;
-(void)_scheduleRealerts:(id)arg1 ;
-(void)_updateModelAndViewForAdditionOfItem:(id)arg1 ;
-(void)_updateModelAndViewForModificationOfItem:(id)arg1 ;
-(void)_playSoundForBulletinIfPossible:(id)arg1 ;
-(void)_removeCachedBannerForBulletinID:(id)arg1 ;
-(void)_updateModelAndViewForRemovalOfItem:(id)arg1 ;
-(char)shouldTreatItemAsInert:(id)arg1 ;
-(id)_listItemContainingSystemAlert:(id)arg1 ;
-(id)_listItemContainingCardItem:(id)arg1 ;
-(void)_activateOrUpdateCardItem:(id)arg1 animated:(char)arg2 ;
-(void)_sortItemList:(id)arg1 ;
-(char)_shouldAddBannerItem:(id)arg1 ;
-(void)_updateModelForRemovalOfItem:(id)arg1 updateView:(char)arg2 ;
-(void)_dismissBulletinsForActionContext:(id)arg1 ;
-(id)lockScreenScrollView;
-(void)_realertTimerFired:(id)arg1 ;
-(void)_showTestBulletin;
-(char)_firstBulletinHasRaiseAction;
-(id)_firstBulletin;
-(void)noteUnlockActionChanged:(id)arg1 ;
-(void)listViewDidBeginScrolling:(id)arg1 ;
-(void)listViewDidEndScrolling:(id)arg1 ;
-(void)listView:(id)arg1 cellDidBeginScrolling:(id)arg2 ;
-(void)listView:(id)arg1 cellDidEndScrolling:(id)arg2 ;
-(void)noteListViewReadyForModelUpdate;
-(id)listItemAtIndexPath:(id)arg1 ;
-(id)newBannerViewForContext:(id)arg1 ;
-(void)setIsOnscreen:(char)arg1 ;
-(char)hasMissedUnreadNotifications;
-(char)dismissReadNotifications;
-(id)pendOrDeactivateAlertItems;
-(void)activateCardItem:(id)arg1 animated:(char)arg2 ;
-(void)deactivateCardItem:(id)arg1 ;
-(void)updateCardItem:(id)arg1 ;
-(void)_updateModelAndViewForReplacingItem:(id)arg1 withNewItem:(id)arg2 ;
-(void)clearItemsForNotificationCenter;
-(void)revealForChangeInMessagePrivacy;
-(void)lockScreenViewDidEndScrollingOnPage:(int)arg1 ;
-(char)quietModeEnabled;
-(char)isHibernating;
-(void)setHasAnyContent:(char)arg1 ;
-(id<SBPresentingDelegate>)presentingDelegate;
-(void)setPresentingDelegate:(id<SBPresentingDelegate>)arg1 ;
-(void)dealloc;
-(void)setDelegate:(id<SBLockScreenNotificationListDelegate>)arg1 ;
-(unsigned)count;
-(id<SBLockScreenNotificationListDelegate>)delegate;
-(id)initWithNibName:(id)arg1 bundle:(id)arg2 ;
-(void)loadView;
-(void)viewWillAppear:(char)arg1 ;
-(void)updateTransitionWithTouchLocation:(CGPoint)arg1 velocity:(CGPoint)arg2 ;
-(void)observer:(id)arg1 addBulletin:(id)arg2 forFeed:(unsigned)arg3 playLightsAndSirens:(char)arg4 withReply:(/*^block*/id)arg5 ;
-(void)observer:(id)arg1 modifyBulletin:(id)arg2 ;
-(void)observer:(id)arg1 removeBulletin:(id)arg2 ;
-(char)observerShouldFetchAttachmentImageBeforeBulletinDelivery:(id)arg1 ;
-(id)observer:(id)arg1 multipleThumbnailSizeConstraintsForAttachmentType:(int)arg2 ;
-(id)observer:(id)arg1 composedAttachmentImageForType:(int)arg2 thumbnailData:(id)arg3 key:(id)arg4 ;
-(void)observer:(id)arg1 noteAlertBehaviorOverridesChanged:(unsigned)arg2 ;
-(void)observer:(id)arg1 noteInvalidatedBulletinIDs:(id)arg2 ;
-(void)observer:(id)arg1 noteServerConnectionStateChanged:(char)arg2 ;
-(char)hasAnyContent;
-(void)bannerTargetManager:(id)arg1 didAddTarget:(id)arg2 ;
-(void)bannerTargetManager:(id)arg1 didRemoveTarget:(id)arg2 ;
-(id)peekNextBannerItemForTarget:(id)arg1 ;
-(id)dequeueNextBannerItemForTarget:(id)arg1 ;
-(void)turnOnScreenIfNecessaryForItem:(id)arg1 ;
@end

