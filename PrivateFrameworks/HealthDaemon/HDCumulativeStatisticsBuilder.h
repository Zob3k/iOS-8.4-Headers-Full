/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:40:58 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <HealthDaemon/HDStatisticsBuilder.h>

@class HDCumulativeCollectionCalculator, HDLastIntervalInfo, HKStatistics;

@interface HDCumulativeStatisticsBuilder : HDStatisticsBuilder {

	HDCumulativeCollectionCalculator* _collectionCalculator;
	double _bucketStartTime;
	double _bucketEndTime;
	double _bucketLength;
	double _sum;
	long long _anchor;
	HDLastIntervalInfo* _lastIntervalInfo;
	HKStatistics* _lastStatistics;

}

@property (nonatomic,retain) HDLastIntervalInfo * lastIntervalInfo;              //@synthesize lastIntervalInfo=_lastIntervalInfo - In the implementation block
@property (nonatomic,retain) HKStatistics * lastStatistics;                      //@synthesize lastStatistics=_lastStatistics - In the implementation block
-(HDLastIntervalInfo *)lastIntervalInfo;
-(id)_statisticsForStartDate:(id)arg1 endDate:(id)arg2 predicate:(id)arg3 shouldStopProcessing:(/*^block*/id)arg4 error:(id*)arg5 ;
-(id)_statisticsArrayWithStartDate:(id)arg1 endDate:(id)arg2 timePeriods:(id)arg3 shouldStopProcessing:(/*^block*/id)arg4 error:(id*)arg5 ;
-(id)_orderedSourceIDsFromSources:(id)arg1 sourceManager:(id)arg2 ;
-(id)_addToLastBucket:(id)arg1 error:(id*)arg2 ;
-(id)_newStatisticsWithTimePeriod:(id)arg1 samples:(id)arg2 error:(id*)arg3 ;
-(id)_initialStatisticsForStartDate:(id)arg1 endDate:(id)arg2 shouldStopProcessing:(/*^block*/id)arg3 error:(id*)arg4 ;
-(id)_mergedSumsForStartDate:(id)arg1 endDate:(id)arg2 predicate:(id)arg3 orderedSourceIds:(id)arg4 unit:(id)arg5 bySource:(id)arg6 dataCount:(unsigned*)arg7 shouldStopProcessing:(/*^block*/id)arg8 database:(id)arg9 ;
-(id)_sumQuantityBySourceFromIdsAndValues:(id)arg1 unit:(id)arg2 sourceManager:(id)arg3 ;
-(char)_isTimeIntervalTooLong:(long long)arg1 sampleStartTime:(double)arg2 sampleEndTime:(double)arg3 seconds:(double)arg4 ;
-(void)_setupStatistics:(id)arg1 withSum:(double)arg2 unit:(id)arg3 collectionCalculator:(id)arg4 sourceManager:(id)arg5 ;
-(id)_statisticsWithTimePeriod:(id)arg1 samples:(id)arg2 lastPeriod:(char)arg3 error:(id*)arg4 ;
-(void)_addValue:(double)arg1 startDate:(double)arg2 endDate:(double)arg3 valuePerSecond:(double)arg4 seconds:(double)arg5 sourceId:(long long)arg6 ;
-(id)_initialStatisticsForCollection:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 sampleCount:(int)arg4 shouldStopProcessing:(/*^block*/id)arg5 error:(id*)arg6 ;
-(id)updateStatisticsCollection:(id)arg1 withSamples:(id)arg2 anchor:(id)arg3 error:(id*)arg4 ;
-(id)updateStatistics:(id)arg1 withSamples:(id)arg2 error:(id*)arg3 ;
-(void)setLastIntervalInfo:(HDLastIntervalInfo *)arg1 ;
-(HKStatistics *)lastStatistics;
-(void)setLastStatistics:(HKStatistics *)arg1 ;
@end

