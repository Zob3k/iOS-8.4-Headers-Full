/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:42:08 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/PowerlogLiteOperators.framework/PowerlogLiteOperators
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <PowerlogCore/PLService.h>

@class PLXPCListenerOperatorComposition, PLXPCResponderOperatorComposition, PLEntryNotificationOperatorComposition, PLSemaphore;

@interface PLDebugService : PLService {

	PLXPCListenerOperatorComposition* _xpcListenerPLLog;
	PLXPCResponderOperatorComposition* _xpcResponderPLLog;
	PLXPCListenerOperatorComposition* _aggregateTestListener;
	PLXPCResponderOperatorComposition* _aggregateTestResponder;
	PLXPCListenerOperatorComposition* _schemaTestListener;
	PLEntryNotificationOperatorComposition* _assertionListener;
	PLEntryNotificationOperatorComposition* _assertionNewListener;
	PLEntryNotificationOperatorComposition* _assertionUpdateListener;
	PLEntryNotificationOperatorComposition* _canSleepNotification;
	PLSemaphore* _canSleepSemaphore;
	PLEntryNotificationOperatorComposition* _sleepNotification;
	PLEntryNotificationOperatorComposition* _wakeNotification;

}

@property (retain) PLXPCListenerOperatorComposition * xpcListenerPLLog;                           //@synthesize xpcListenerPLLog=_xpcListenerPLLog - In the implementation block
@property (retain) PLXPCResponderOperatorComposition * xpcResponderPLLog;                         //@synthesize xpcResponderPLLog=_xpcResponderPLLog - In the implementation block
@property (retain) PLXPCListenerOperatorComposition * aggregateTestListener;                      //@synthesize aggregateTestListener=_aggregateTestListener - In the implementation block
@property (retain) PLXPCResponderOperatorComposition * aggregateTestResponder;                    //@synthesize aggregateTestResponder=_aggregateTestResponder - In the implementation block
@property (retain) PLXPCListenerOperatorComposition * schemaTestListener;                         //@synthesize schemaTestListener=_schemaTestListener - In the implementation block
@property (retain) PLEntryNotificationOperatorComposition * assertionListener;                    //@synthesize assertionListener=_assertionListener - In the implementation block
@property (retain) PLEntryNotificationOperatorComposition * assertionNewListener;                 //@synthesize assertionNewListener=_assertionNewListener - In the implementation block
@property (retain) PLEntryNotificationOperatorComposition * assertionUpdateListener;              //@synthesize assertionUpdateListener=_assertionUpdateListener - In the implementation block
@property (retain) PLEntryNotificationOperatorComposition * canSleepNotification;                 //@synthesize canSleepNotification=_canSleepNotification - In the implementation block
@property (retain) PLSemaphore * canSleepSemaphore;                                               //@synthesize canSleepSemaphore=_canSleepSemaphore - In the implementation block
@property (retain) PLEntryNotificationOperatorComposition * sleepNotification;                    //@synthesize sleepNotification=_sleepNotification - In the implementation block
@property (retain) PLEntryNotificationOperatorComposition * wakeNotification;                     //@synthesize wakeNotification=_wakeNotification - In the implementation block
+(void)load;
+(id)railDefinitions;
+(id)entryEventNoneDefinitions;
+(id)entryAggregateDefinitions;
+(id)entryAggregateDefinitionAggregateTest;
+(id)entryEventNoneDefinitionArrayTest;
+(id)entryEventNoneDefinitionSleepNotificationTest;
+(id)entryEventNoneDefinitionFastInsertTest;
-(id)init;
-(void)initOperatorDependancies;
-(void)setWakeNotification:(PLEntryNotificationOperatorComposition *)arg1 ;
-(void)setCanSleepNotification:(PLEntryNotificationOperatorComposition *)arg1 ;
-(PLEntryNotificationOperatorComposition *)wakeNotification;
-(PLEntryNotificationOperatorComposition *)canSleepNotification;
-(PLSemaphore *)canSleepSemaphore;
-(void)setCanSleepSemaphore:(PLSemaphore *)arg1 ;
-(void)printNullTestResultsForEntry:(id)arg1 withDescription:(id)arg2 ;
-(void)setXpcListenerPLLog:(PLXPCListenerOperatorComposition *)arg1 ;
-(void)setAggregateTestListener:(PLXPCListenerOperatorComposition *)arg1 ;
-(void)setAggregateTestResponder:(PLXPCResponderOperatorComposition *)arg1 ;
-(void)setSchemaTestListener:(PLXPCListenerOperatorComposition *)arg1 ;
-(void)setAssertionListener:(PLEntryNotificationOperatorComposition *)arg1 ;
-(void)setAssertionNewListener:(PLEntryNotificationOperatorComposition *)arg1 ;
-(void)setAssertionUpdateListener:(PLEntryNotificationOperatorComposition *)arg1 ;
-(void)setSleepNotification:(PLEntryNotificationOperatorComposition *)arg1 ;
-(void)bombardRails;
-(void)testDailyTasks;
-(void)testArchive;
-(void)testArray;
-(void)testGenerateOTASubmission;
-(void)testQMI;
-(void)testFastInserts;
-(void)testAllEntryKeyRequests;
-(void)testEntrySleep;
-(void)testEntryWake;
-(void)testEntryLogRequestedForEntryKey:(id)arg1 ;
-(void)testEntryApplicationAgent;
-(void)testEntryDelete;
-(void)testEntryQueries;
-(PLXPCListenerOperatorComposition *)xpcListenerPLLog;
-(PLXPCResponderOperatorComposition *)xpcResponderPLLog;
-(void)setXpcResponderPLLog:(PLXPCResponderOperatorComposition *)arg1 ;
-(PLXPCListenerOperatorComposition *)aggregateTestListener;
-(PLXPCResponderOperatorComposition *)aggregateTestResponder;
-(PLXPCListenerOperatorComposition *)schemaTestListener;
-(PLEntryNotificationOperatorComposition *)assertionListener;
-(PLEntryNotificationOperatorComposition *)assertionNewListener;
-(PLEntryNotificationOperatorComposition *)assertionUpdateListener;
-(PLEntryNotificationOperatorComposition *)sleepNotification;
@end

