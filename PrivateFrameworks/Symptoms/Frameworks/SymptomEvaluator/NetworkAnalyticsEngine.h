/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:42:59 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomEvaluator.framework/SymptomEvaluator
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <SymptomEvaluator/SymptomEvaluator-Structs.h>
#import <SymptomEvaluator/AnalyticsEngineCore.h>

@class NSMutableDictionary, NSDate;

@interface NetworkAnalyticsEngine : AnalyticsEngineCore {

	id primaryInterfaceObserver;
	id trafficObserver;
	id dnsObserver;
	id rssiObserver;
	NSMutableDictionary* activeEpochs;
	NStatManagerRef routeManager;
	/*^block*/id routeMetricsRefreshCompletionBlock;
	NSMutableDictionary* liveDefaultRoutes;
	int lastScoreExit;
	NSDate* lastKnownGoodNotified;
	NSDate* pendedRssiEdge;
	unsigned long long pendedRssiEdgeTarget;
	int combinedCellDNSCounts;
	int combinedWifiDNSCounts;
	NSMutableDictionary* snapshots;
	WiFiManagerClientRef _wifiManager;
	WiFiDeviceClientRef _wifiDevice;

}

@property (assign,nonatomic) WiFiManagerClientRef wifiManager;              //@synthesize wifiManager=_wifiManager - In the implementation block
@property (assign,nonatomic) WiFiDeviceClientRef wifiDevice;                //@synthesize wifiDevice=_wifiDevice - In the implementation block
+(id)queue;
+(char)getDNSCountsOn:(id)arg1 total:(int*)arg2 impacted:(int*)arg3 ;
+(BOOL)performNetAttachmentQueryOn:(id)arg1 reply:(/*^block*/id)arg2 ;
+(void)awdCaptureIn:(id)arg1 replyQueue:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)dealloc;
-(WiFiManagerClientRef)wifiManager;
-(WiFiDeviceClientRef)wifiDevice;
-(void)setWifiDevice:(WiFiDeviceClientRef)arg1 ;
-(void)setWifiManager:(WiFiManagerClientRef)arg1 ;
-(int)performQueryOnEntityFromCache:(id)arg1 pred:(id)arg2 altpred:(id*)arg3 actions:(id)arg4 found:(id*)arg5 ;
-(void)performQueryPostProcessing:(id)arg1 actions:(id)arg2 processOutcome:(id)arg3 ;
-(id)initWithWorkspace:(id)arg1 params:(id)arg2 queue:(id)arg3 ;
-(BOOL)handlesEntity:(id)arg1 ;
-(void)performQueryOnEntity:(id)arg1 pred:(id)arg2 sort:(id)arg3 actions:(id)arg4 service:(id)arg5 connection:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)createSnapshotFor:(id)arg1 pred:(id)arg2 actions:(id)arg3 reply:(/*^block*/id)arg4 ;
-(id)setOption:(id)arg1 ;
-(void)resetDataFor:(id)arg1 nameKind:(id)arg2 ;
-(void)_wifiNetworkChangeInternal:(WiFiNetworkRef)arg1 interfaceName:(id)arg2 roamingEvent:(BOOL)arg3 ;
-(id)_currentEpochForKind:(id)arg1 ;
-(void)_wifiRetrieveDNSServersWhenPrimaryForEpoch:(id)arg1 ;
-(BOOL)_primaryKeyChange:(id)arg1 interfaceName:(id)arg2 ofKind:(id)arg3 roamingEvent:(BOOL)arg4 ;
-(void)_updateCombinedDNSCounts;
-(void)_primaryNetworkInterfaceChange:(id)arg1 ;
-(void)_flowCompleted:(id)arg1 ;
-(void)_dnsWithSymptoms:(id)arg1 ;
-(void)_rssiEdge:(id)arg1 ;
-(void)_scoringTrampoline;
-(void)_removeOldRouteRecords;
-(void)_disarmDOASuspector:(id)arg1 ;
-(void)_disarmFatalSuspector:(id)arg1 withEventAt:(id)arg2 by:(id)arg3 ;
-(void)_handleRouteData:(NStatSourceRef)arg1 ;
-(BOOL)_shouldAcceptRouteSource:(NStatSourceRef)arg1 withDescription:(id)arg2 ;
-(void)_handleRouteClosing:(NStatSourceRef)arg1 ;
-(void)_wifiNetworkChange:(id)arg1 ;
-(void)_cellNetworkChange:(id)arg1 ;
-(void)_armFatalSuspector:(id)arg1 ;
-(void)_delayedKnownGoodNetworkAlert;
-(void)_disarmLowQDisconnectSuspector:(id)arg1 ;
-(void)_armLowQDisconnectSuspector:(id)arg1 ;
-(NStatSourceRef)_newDefRouteOfKind:(id)arg1 ;
-(void)_armDOASuspector:(id)arg1 ;
-(id)_scoringDuty:(id)arg1 withRetCode:(int*)arg2 ;
-(void)_dumpStats;
-(id)_createNetworkAttachmentIdentifierExclusionList;
-(char)_awdCaptureHistorical:(id)arg1 ;
-(void)_refreshRouteMetrics;
-(void)_refreshRouteMetricsComplete;
-(void)_refreshRouteMetricsWithCallbackOnQueue:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(int)_combinedDNSCountForEpoch:(id)arg1 ;
-(char)_getDNSCountsOn:(id)arg1 total:(int*)arg2 impacted:(int*)arg3 ;
-(BOOL)_performNetAttachmentQueryOn:(id)arg1 reply:(/*^block*/id)arg2 ;
-(char)_awdCaptureInstant:(id)arg1 ;
-(void)_awdCaptureIn:(id)arg1 replyQueue:(id)arg2 reply:(/*^block*/id)arg3 ;
@end

