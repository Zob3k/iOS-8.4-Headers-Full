/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:42:38 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/StoreBookkeeper.framework/StoreBookkeeper
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <StoreBookkeeper/ISStoreURLOperationDelegate.h>

@protocol SBKTransactionControllerDelegate, OS_dispatch_queue;
@class NSString, NSURL, SBKStoreAuthenticationController, SBKTransaction, SSAccount, NSObject, NSOperationQueue, NSMutableArray, SBKTaskAssertion;

@interface SBKTransactionController : NSObject <ISStoreURLOperationDelegate> {

	char _enabled;
	char _shouldAuthenticateIfNecessary;
	char _isResolvingError;
	id<SBKTransactionControllerDelegate> _delegate;
	NSString* _domain;
	NSURL* _requestURL;
	SBKStoreAuthenticationController* _authenticationController;
	SBKTransaction* _currentTransaction;
	SSAccount* _account;
	NSObject*<OS_dispatch_queue> _queue;
	NSOperationQueue* _operationQueue;
	NSMutableArray* _pendingTransactions;
	SBKTaskAssertion* _backgroundTaskAssertion;
	id _networkTypeObserver;
	int _conflictResolutionAttempts;

}

@property (__weak) id<SBKTransactionControllerDelegate> delegate;                            //@synthesize delegate=_delegate - In the implementation block
@property (copy,readonly) NSString * domain;                                                 //@synthesize domain=_domain - In the implementation block
@property (readonly) NSURL * requestURL;                                                     //@synthesize requestURL=_requestURL - In the implementation block
@property (getter=isEnabled,readonly) char enabled;                                          //@synthesize enabled=_enabled - In the implementation block
@property (getter=isIdle,readonly) char idle; 
@property (retain) SBKStoreAuthenticationController * authenticationController;              //@synthesize authenticationController=_authenticationController - In the implementation block
@property (assign) char shouldAuthenticateIfNecessary;                                       //@synthesize shouldAuthenticateIfNecessary=_shouldAuthenticateIfNecessary - In the implementation block
@property (nonatomic,retain) SBKTransaction * currentTransaction;                            //@synthesize currentTransaction=_currentTransaction - In the implementation block
@property (retain) SSAccount * account;                                                      //@synthesize account=_account - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> queue;                                       //@synthesize queue=_queue - In the implementation block
@property (retain) NSOperationQueue * operationQueue;                                        //@synthesize operationQueue=_operationQueue - In the implementation block
@property (retain) NSMutableArray * pendingTransactions;                                     //@synthesize pendingTransactions=_pendingTransactions - In the implementation block
@property (assign) char isResolvingError;                                                    //@synthesize isResolvingError=_isResolvingError - In the implementation block
@property (retain) SBKTaskAssertion * backgroundTaskAssertion;                               //@synthesize backgroundTaskAssertion=_backgroundTaskAssertion - In the implementation block
@property (__weak) id networkTypeObserver;                                                   //@synthesize networkTypeObserver=_networkTypeObserver - In the implementation block
@property (assign) int conflictResolutionAttempts;                                           //@synthesize conflictResolutionAttempts=_conflictResolutionAttempts - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)operation:(id)arg1 failedWithError:(id)arg2 ;
-(void)_endBackgroundTask;
-(void)dealloc;
-(void)setDelegate:(id<SBKTransactionControllerDelegate>)arg1 ;
-(id<SBKTransactionControllerDelegate>)delegate;
-(NSString *)domain;
-(void)setEnabled:(char)arg1 ;
-(char)isEnabled;
-(void)setOperationQueue:(NSOperationQueue *)arg1 ;
-(NSObject*<OS_dispatch_queue>)queue;
-(void)setQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSOperationQueue *)operationQueue;
-(SSAccount *)account;
-(void)setAccount:(SSAccount *)arg1 ;
-(NSURL *)requestURL;
-(void)setDomain:(NSString *)arg1 ;
-(void)_onQueue_endBackgroundTask;
-(id)_onQueue_clampsController;
-(void)_onQueue_processPendingTransactions;
-(void)_onQueue_cancelAllPendingTransactions:(id)arg1 ;
-(char)_onQueue_isIdle;
-(void)scheduleTransaction:(id)arg1 ;
-(char)_delegateShouldScheduleTransaction:(id)arg1 error:(id*)arg2 ;
-(void)_onQueue_scheduleTransaction:(id)arg1 isRetry:(char)arg2 ;
-(void)_onQueue_transactionDidFail:(id)arg1 withError:(id)arg2 ;
-(void)_onQueue_cancelTransaction:(id)arg1 error:(id)arg2 ;
-(void)_storeOperationDidComplete:(id)arg1 ;
-(void)_onQueue_resolveError:(id)arg1 resolution:(int)arg2 ;
-(void)_onQueue_beginBackgroundTask;
-(SBKTaskAssertion *)backgroundTaskAssertion;
-(void)_onQueue_transactionDidCancel:(id)arg1 withError:(id)arg2 ;
-(void)_onQueue_processCurrentTransaction;
-(char)_onQueue_authenticationCanProcessTransaction:(id)arg1 error:(id*)arg2 ;
-(void)_enqueueStoreOperation:(id)arg1 ;
-(char)_onQueue_canScheduleTransaction:(id)arg1 error:(id*)arg2 ;
-(void)_onQueue_addPendingTransaction:(id)arg1 ;
-(char)_onQueue_isEnabledForTransaction:(id)arg1 error:(id*)arg2 ;
-(void)_onQueue_assertIsTransactionValid:(id)arg1 error:(id*)arg2 ;
-(char)_onQueue_clampsCanScheduleTransaction:(id)arg1 error:(id*)arg2 ;
-(void)_delegateTransactionDidFinish:(id)arg1 ;
-(char)_delegateTransactionDidFail:(id)arg1 withError:(id)arg2 ;
-(void)_resolveError:(id)arg1 resolution:(int)arg2 ;
-(void)_delegateTransactionDidCancel:(id)arg1 withError:(id)arg2 ;
-(void)_onQueue_currentTransactionDidFinish;
-(void)_processDataInResponse:(id)arg1 ;
-(char)shouldAuthenticateIfNecessary;
-(void)_onQueue_performRetryErrorHandlingForError:(id)arg1 ;
-(void)_onQueue_performCancelErrorHandlingForError:(id)arg1 ;
-(void)_onQueue_performDefaultErrorHandlingForError:(id)arg1 ;
-(char)_sendFinishedBlockForTransaction:(id)arg1 success:(char)arg2 cancelled:(char)arg3 error:(id)arg4 handledAsFinishedBlock:(char*)arg5 ;
-(void)_onQueue_processOperationOutput:(id)arg1 operation:(id)arg2 operationAuthenticated:(char)arg3 ;
-(id)initWithDomain:(id)arg1 requestURL:(id)arg2 ;
-(void)setRequestURL:(NSURL *)arg1 ;
-(void)scheduleTransaction:(id)arg1 withTransactionFinishedBlock:(/*^block*/id)arg2 ;
-(void)cancelScheduledTransaction:(id)arg1 ;
-(void)cancelAllTransactions;
-(void)cancelAllTransactionsCancelCode:(int)arg1 ;
-(SBKStoreAuthenticationController *)authenticationController;
-(void)setAuthenticationController:(SBKStoreAuthenticationController *)arg1 ;
-(void)setShouldAuthenticateIfNecessary:(char)arg1 ;
-(SBKTransaction *)currentTransaction;
-(void)setCurrentTransaction:(SBKTransaction *)arg1 ;
-(NSMutableArray *)pendingTransactions;
-(void)setPendingTransactions:(NSMutableArray *)arg1 ;
-(char)isResolvingError;
-(void)setIsResolvingError:(char)arg1 ;
-(void)setBackgroundTaskAssertion:(SBKTaskAssertion *)arg1 ;
-(id)networkTypeObserver;
-(void)setNetworkTypeObserver:(id)arg1 ;
-(int)conflictResolutionAttempts;
-(void)setConflictResolutionAttempts:(int)arg1 ;
-(char)isIdle;
-(void)_beginBackgroundTask;
-(void)operation:(id)arg1 didReceiveResponse:(id)arg2 ;
-(void)operation:(id)arg1 finishedWithOutput:(id)arg2 ;
-(void)_networkTypeChangedNotification:(id)arg1 ;
@end

