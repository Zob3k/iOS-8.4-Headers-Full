/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:43:14 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <VoiceServices/VoiceServices-Structs.h>
#import <VoiceServices/VSSpeechConnectionDelegate.h>

@protocol OS_dispatch_queue, VSSpeechSynthesizerDelegate;
@class VSKeepAlive, NSObject, VSSpeechConnection, NSString;

@interface VSSpeechSynthesizer : NSObject <VSSpeechConnectionDelegate> {

	VSKeepAlive* _keepAlive;
	VSKeepAlive* _inactiveKeepAlive;
	int _footprint;
	char _useCustomVoice;
	int _gender;
	char _useSharedSession;
	char _audioSessionIDIsValid;
	unsigned _audioSessionID;
	unsigned _audioQueueFlags;
	NSObject*<OS_dispatch_queue> _queue;
	VSSpeechConnection* _speechConnection;
	struct {
		unsigned delegateStart : 1;
		unsigned delegateFinish : 1;
		unsigned delegateFinishWithPhonemesSpoken : 1;
		unsigned delegatePause : 1;
		unsigned delegateContinue : 1;
		unsigned delegateWillSpeak : 1;
		unsigned delegateStartWithRequest : 1;
		unsigned delegateFinishWithRequest : 1;
		unsigned delegateFinishWithPhonemesSpokenWithRequest : 1;
		unsigned delegatePauseWithRequest : 1;
		unsigned delegateContinueWithRequest : 1;
		unsigned delegateWillSpeakWithRequest : 1;
		unsigned willUseInput : 1;
	}  _synthesizerFlags;
	id<VSSpeechSynthesizerDelegate> _delegate;
	float _rate;
	float _pitch;
	float _volume;
	NSString* _voice;

}

@property (assign,nonatomic,__weak) id<VSSpeechSynthesizerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) float rate;                                                   //@synthesize rate=_rate - In the implementation block
@property (assign,nonatomic) float pitch;                                                  //@synthesize pitch=_pitch - In the implementation block
@property (assign,nonatomic) float volume;                                                 //@synthesize volume=_volume - In the implementation block
@property (nonatomic,retain) NSString * voice;                                             //@synthesize voice=_voice - In the implementation block
+(void)initialize;
+(id)availableVoicesForLanguageCode:(id)arg1 ;
+(id)availableFootprintsForVoice:(id)arg1 languageCode:(id)arg2 ;
+(char)isSystemSpeaking;
+(void)getVoiceInfoForLanguageCode:(id)arg1 footprint:(int)arg2 gender:(int)arg3 custom:(char)arg4 reply:(/*^block*/id)arg5 ;
+(id)availableVoices;
+(void)setLogToFile:(char)arg1 ;
+(void)getLogToFile:(/*^block*/id)arg1 ;
+(id)availableLanguageCodes;
+(void)getAllVoiceAssets:(/*^block*/id)arg1 ;
+(void)getLocalVoiceAssets:(/*^block*/id)arg1 ;
+(void)downloadVoiceAsset:(id)arg1 progress:(/*^block*/id)arg2 completion:(/*^block*/id)arg3 ;
+(void)setAutoDownloadedVoiceAssets:(id)arg1 ;
+(void)getAutoDownloadedVoiceAssets:(/*^block*/id)arg1 ;
-(id)speechString;
-(int)gender;
-(void)setGender:(int)arg1 ;
-(void)dealloc;
-(void)setDelegate:(id<VSSpeechSynthesizerDelegate>)arg1 ;
-(id)init;
-(id<VSSpeechSynthesizerDelegate>)delegate;
-(void)_setDelegate:(id)arg1 ;
-(char)isSpeaking;
-(NSString *)voice;
-(void)setMaintainInactivePersistentConnection:(char)arg1 ;
-(void)setUseCustomVoice:(char)arg1 ;
-(void)setFootprint:(int)arg1 ;
-(void)useSpecificAudioSession:(unsigned)arg1 ;
-(char)stopSpeakingAtNextBoundary:(int)arg1 synchronously:(char)arg2 error:(id*)arg3 ;
-(char)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 request:(id*)arg3 error:(id*)arg4 ;
-(float)rate;
-(void)setRate:(float)arg1 ;
-(float)pitch;
-(int)footprint;
-(void)setPitch:(float)arg1 ;
-(char)stopSpeakingAtNextBoundary:(int)arg1 error:(id*)arg2 ;
-(id)initForInputFeedback;
-(char)startSpeakingAttributedString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 error:(id*)arg4 ;
-(char)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 error:(id*)arg3 ;
-(char)useCustomVoice;
-(char)_startSpeakingString:(id)arg1 orAttributedString:(id)arg2 toURL:(id)arg3 withLanguageCode:(id)arg4 request:(id*)arg5 error:(id*)arg6 ;
-(char)_stopSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(char)arg3 error:(id*)arg4 ;
-(void)setMaintainPersistentConnection:(char)arg1 ;
-(char)startSpeakingString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 error:(id*)arg4 ;
-(char)pauseSpeakingAtNextBoundary:(int)arg1 synchronously:(char)arg2 error:(id*)arg3 ;
-(char)_pauseSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(char)arg3 error:(id*)arg4 ;
-(char)_continueSpeakingRequest:(id)arg1 withError:(id*)arg2 ;
-(void)connection:(id)arg1 speechRequestDidStart:(id)arg2 ;
-(void)connection:(id)arg1 speechRequestDidPause:(id)arg2 ;
-(void)connection:(id)arg1 speechRequestDidContinue:(id)arg2 ;
-(void)connection:(id)arg1 speechRequest:(id)arg2 didStopAtEnd:(char)arg3 phonemesSpoken:(id)arg4 error:(id)arg5 ;
-(void)connection:(id)arg1 speechRequest:(id)arg2 willSpeakMark:(int)arg3 inRange:(NSRange)arg4 ;
-(char)startSpeakingString:(id)arg1 error:(id*)arg2 ;
-(char)startSpeakingString:(id)arg1 toURL:(id)arg2 error:(id*)arg3 ;
-(char)pauseSpeakingAtNextBoundary:(int)arg1 error:(id*)arg2 ;
-(char)continueSpeakingWithError:(id*)arg1 ;
-(float)minimumRate;
-(float)maximumRate;
-(void)useSharedAudioSession:(char)arg1 ;
-(void)useAudioQueueFlags:(unsigned)arg1 ;
-(char)startSpeakingString:(id)arg1 request:(id*)arg2 error:(id*)arg3 ;
-(char)startSpeakingString:(id)arg1 toURL:(id)arg2 request:(id*)arg3 error:(id*)arg4 ;
-(char)stopSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 error:(id*)arg3 ;
-(char)stopSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(char)arg3 error:(id*)arg4 ;
-(char)pauseSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 error:(id*)arg3 ;
-(char)pauseSpeakingRequest:(id)arg1 atNextBoundary:(int)arg2 synchronously:(char)arg3 error:(id*)arg4 ;
-(char)continueSpeakingRequest:(id)arg1 withError:(id*)arg2 ;
-(float)volume;
-(void)setVolume:(float)arg1 ;
-(void)setVoice:(NSString *)arg1 ;
@end

