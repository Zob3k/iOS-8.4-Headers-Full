/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:39:37 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CameraKit/CameraKit-Structs.h>
#import <CameraKit/CAMNebulaDaemonProtocol.h>

@protocol OS_dispatch_queue;
@class NSMutableArray, NSObject, CAMTimelapseMovieWriter, CAMTimelapseState, NSString;

@interface CAMTimelapseBackendController : NSObject <CAMNebulaDaemonProtocol> {

	char __writingMovie;
	char __capturing;
	NSMutableArray* __sessionContexts;
	NSObject*<OS_dispatch_queue> __workQueue;
	CAMTimelapseMovieWriter* __movieWriter;
	CAMTimelapseState* __currentState;

}

@property (nonatomic,readonly) NSMutableArray * _sessionContexts;                                     //@synthesize _sessionContexts=__sessionContexts - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> _workQueue;                               //@synthesize _workQueue=__workQueue - In the implementation block
@property (nonatomic,readonly) char _writingMovie;                                                    //@synthesize _writingMovie=__writingMovie - In the implementation block
@property (nonatomic,readonly) CAMTimelapseMovieWriter * _movieWriter;                                //@synthesize _movieWriter=__movieWriter - In the implementation block
@property (setter=_setCurrentState:,nonatomic,retain) CAMTimelapseState * _currentState;              //@synthesize _currentState=__currentState - In the implementation block
@property (assign,setter=_setCapturing:,getter=_isCapturing,nonatomic) char _capturing;               //@synthesize _capturing=__capturing - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
-(CAMTimelapseState *)_currentState;
-(void)_setCurrentState:(id)arg1 ;
-(id)init;
-(void)_setCapturing:(char)arg1 ;
-(id)_getOrCreateSessionContextForTimelapseUUID:(id)arg1 ;
-(void)_updateSessionContext:(id)arg1 withState:(id)arg2 ;
-(void)_performPendingWork;
-(void)_dispatchToWorkQueueWithBlock:(/*^block*/id)arg1 ;
-(void)_updatePendingWorkFromDiskForceEndLastSession:(char)arg1 ;
-(char)_deleteItemAtPath:(id)arg1 ;
-(void)_dispatchToWorkQueueAfterDelay:(double)arg1 withBlock:(/*^block*/id)arg2 ;
-(char)_isCameraRunning;
-(void)_permanentlyFailTimelapseUUID:(id)arg1 ;
-(char)_scheduleDelayedMovieWriteIfNeededForTimelapseUUID:(id)arg1 ;
-(void)_writeMovieForSessionContext:(id)arg1 ;
-(void)_dispatchToMainQueueWithBlock:(/*^block*/id)arg1 ;
-(void)_createPlaceholderAssetForState:(id)arg1 ;
-(CGAffineTransform)_frameTransformForState:(id)arg1 ;
-(void)_movieWrittenToFilePath:(id)arg1 duration:(double)arg2 state:(id)arg3 ;
-(void)_reserveDummyFileForTimelapseUUID:(id)arg1 firstImageFilePath:(id)arg2 ;
-(void)_notifyAssetsdOfIncomingMovieAtPath:(id)arg1 duration:(double)arg2 state:(id)arg3 ;
-(void)startNebulaWithUUID:(id)arg1 ;
-(void)resumeNebulaWithUUID:(id)arg1 ;
-(void)updateNebulaWithUUID:(id)arg1 ;
-(void)finishCaptureForNebulaWithUUID:(id)arg1 ;
-(void)stopNebulaWithUUID:(id)arg1 ;
-(void)updatePendingWorkFromDiskForceEndLastSession:(char)arg1 ;
-(void)handleClientConnection:(id)arg1 ;
-(void)handleClientDisconnection;
-(NSMutableArray *)_sessionContexts;
-(NSObject*<OS_dispatch_queue>)_workQueue;
-(char)_writingMovie;
-(CAMTimelapseMovieWriter *)_movieWriter;
-(char)_isCapturing;
@end

