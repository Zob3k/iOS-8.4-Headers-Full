/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:41:16 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/ManagedConfiguration.framework/MDM.framework/MDM
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MDM/MCManagedAssetManager.h>
#import <MDM/MCJobQueueObserver.h>

@protocol OS_dispatch_queue;
@class NSString, NSMutableDictionary, NSObject, MCJobQueue;

@interface MCManagedAppManager : MCManagedAssetManager <MCJobQueueObserver> {

	NSString* _manifestPath;
	NSMutableDictionary* _manifest;
	NSObject*<OS_dispatch_queue> _manifestQueue;
	MCJobQueue* _jobQueue;

}

@property (nonatomic,copy) NSString * manifestPath;                                   //@synthesize manifestPath=_manifestPath - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * manifest;                          //@synthesize manifest=_manifest - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> manifestQueue;              //@synthesize manifestQueue=_manifestQueue - In the implementation block
@property (nonatomic,retain) MCJobQueue * jobQueue;                                   //@synthesize jobQueue=_jobQueue - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)stringForAppState:(int)arg1 ;
+(id)sharedManager;
-(void)cleanUp;
-(id)managedAppMetadataByBundleID;
-(void)setMetadata:(id)arg1 forBundleID:(id)arg2 ;
-(void)updateApplicationInstallationStates;
-(void)installITunesStoreID:(id)arg1 appIdentifier:(id)arg2 managementFlags:(int)arg3 attributes:(id)arg4 configuration:(id)arg5 mustRedownload:(char)arg6 assertion:(id)arg7 completionBlock:(/*^block*/id)arg8 ;
-(void)installManifestURL:(id)arg1 managementFlags:(int)arg2 attributes:(id)arg3 configuration:(id)arg4 assertion:(id)arg5 completionBlock:(/*^block*/id)arg6 ;
-(char)applyRedemptionCode:(id)arg1 forBundleID:(id)arg2 assertion:(id)arg3 outError:(id*)arg4 ;
-(void)advanceTransientStates;
-(void)advanceTransientStatesForBundleID:(id)arg1 ;
-(char)hasMetadataForBundleID:(id)arg1 ;
-(int)appStateForBundleID:(id)arg1 ;
-(void)removeBundleID:(id)arg1 ;
-(id)initWithManifestPath:(id)arg1 ;
-(char)manifestQueueHasMetadataForBundleID:(id)arg1 ;
-(void)manifestQueueCommitManifest;
-(id)manifestQueueManagedAppMetadataByBundleID;
-(void)manifestQueueSetManagedAppMetadataByBundleID:(id)arg1 ;
-(void)manifestQueueSetMetadata:(id)arg1 forBundleID:(id)arg2 ;
-(id)manifestQueueMetadataForBundleID:(id)arg1 ;
-(int)manifestQueueAppStateForBundleID:(id)arg1 ;
-(void)manifestQueueSetAppState:(int)arg1 forBundleID:(id)arg2 ;
-(void)cancelAppDownloadForBundleID:(id)arg1 ;
-(void)manifestQueueRemoveBundleID:(id)arg1 ;
-(char)_isBundleID:(id)arg1 installedAsApplicationType:(unsigned)arg2 ;
-(char)_isBundleIDInstalled:(id)arg1 ;
-(void)_displayAppInstallationAlertMessage:(id)arg1 isUpdate:(char)arg2 assertion:(id)arg3 completionBlock:(/*^block*/id)arg4 ;
-(char)_appBundleID:(id)arg1 wasInstalledOutIsManaged:(char*)arg2 ;
-(void)_displayPromptForAppInstallationTitle:(id)arg1 bundleID:(id)arg2 isAppStore:(char)arg3 isUpdate:(char)arg4 assertion:(id)arg5 completionBlock:(/*^block*/id)arg6 ;
-(void)_displayPromptForStoreAppUpdateIfNeededPurchaserAccount:(id)arg1 purchase:(id)arg2 title:(id)arg3 bundleID:(id)arg4 assertion:(id)arg5 completionBlock:(/*^block*/id)arg6 ;
-(id)downloadingAppIDs;
-(id)_appAlreadyQueuedError:(id)arg1 ;
-(void)resumeDownloadForBundleID:(id)arg1 ;
-(id)_bundleIDAlreadyInstalledError:(id)arg1 ;
-(id)_cannotValidateAppIDError;
-(id)_cannotValidateAppIDErrorUnderlyingError:(id)arg1 ;
-(void)_searchPurchaseHistoryForITunesStoreID:(id)arg1 appIdentifier:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(char)manifestQueueShouldQueueAppBundleID:(id)arg1 forDownloadManagementFlags:(int)arg2 resumeDownloadIfNeeded:(char)arg3 outRejectionReason:(id*)arg4 outIsUpdate:(char*)arg5 outError:(id*)arg6 ;
-(void)_purchase:(id)arg1 assertion:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)_displayAppInstallationFailureAlertTitle:(id)arg1 assertion:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)_promptUserForStoreAppInstallationPurchase:(id)arg1 title:(id)arg2 bundleID:(id)arg3 requireAuthenticatedAccount:(char)arg4 assertion:(id)arg5 completionBlock:(/*^block*/id)arg6 ;
-(void)_displayAppUpdateFailureAlertTitle:(id)arg1 assertion:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)_promptUserForStoreAppUpdatePurchase:(id)arg1 title:(id)arg2 bundleID:(id)arg3 assertion:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)_lookupItemIfNeededPurchaseHistoryPurchase:(id)arg1 mustRedownload:(char)arg2 iTunesStoreID:(id)arg3 appIdentifier:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)searchPurchaseHistoryForITunesStoreID:(id)arg1 appIdentifier:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(id)_invalidManifestErrorWithURL:(id)arg1 underlyingError:(id)arg2 ;
-(void)manifestQueueAdvanceTransientStatesForBundleID:(id)arg1 ;
-(void)_installEnterpriseAppManifestURL:(id)arg1 assertion:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)_promptUserForEnterpriseAppUpdateManifestURL:(id)arg1 title:(id)arg2 bundleID:(id)arg3 assertion:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)_promptUserForEnterpriseAppInstallationManifestURL:(id)arg1 title:(id)arg2 bundleID:(id)arg3 assertion:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(id)bundleIDsWithFlags:(int)arg1 ;
-(char)_advanceTransientStateForBundleID:(id)arg1 params:(id)arg2 outNewParams:(id*)arg3 outSetChanged:(char*)arg4 ;
-(id)metadataForBundleID:(id)arg1 ;
-(void)setAppState:(int)arg1 forBundleID:(id)arg2 ;
-(id)_notAnAppError;
-(void)uninstallManagedAppsAccordingToFlagsWithAssertion:(id)arg1 ;
-(NSString *)manifestPath;
-(void)setManifestPath:(NSString *)arg1 ;
-(NSObject*<OS_dispatch_queue>)manifestQueue;
-(void)setManifestQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(id)doNotBackupAppIDs;
-(MCJobQueue *)jobQueue;
-(void)setJobQueue:(MCJobQueue *)arg1 ;
-(char)isAppManaged:(id)arg1 ;
-(NSMutableDictionary *)manifest;
-(void)setManifest:(NSMutableDictionary *)arg1 ;
@end

