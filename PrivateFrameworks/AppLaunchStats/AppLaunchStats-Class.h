/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:39:25 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/AppLaunchStats.framework/AppLaunchStats
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <AppLaunchStats/AppLaunchStats-Structs.h>
#import <AppLaunchStats/DuetLoggerProtocol.h>
#import <AppLaunchStats/DuetSaveAndRestore.h>

@protocol OS_dispatch_queue, OS_dispatch_source, OS_xpc_object, AppLaunchStatsDelegate;
@class AppLaunchStatsState, AppLaunchStatsAppWorkSpace, AppLaunchStatsDelayLaunch, AppLaunchStatsLaunchQueue, AppLaunchStatsSaveAndRestore, AppLaunchStatsSBMonitor, AppLaunchStatsSBSettings, AppLaunchStatsStateHandlerQueue, AppLaunchStatsREventHandler, AppLaunchStatsScheduler, AppLaunchStatsDiag, AppLaunchStatsNetwork, BudgetPool, NSMutableDictionary, CDSession, NSDistributedNotificationCenter, NSDate, NSNumber, NSRunLoop, NSString, NSObject, CDBudget, CDAttribute;

@interface AppLaunchStats : NSObject <DuetLoggerProtocol, DuetSaveAndRestore> {

	AppLaunchStatsState* aplsState;
	AppLaunchStatsAppWorkSpace* aplsAppWorkSpace;
	AppLaunchStatsDelayLaunch* aplsDelayLaunch;
	AppLaunchStatsLaunchQueue* aplsLaunchQueue;
	AppLaunchStatsSaveAndRestore* aplsSaveAndRestore;
	AppLaunchStatsSBMonitor* aplsSBMonitor;
	AppLaunchStatsSBSettings* aplsSBSettings;
	AppLaunchStatsStateHandlerQueue* aplsStateHandlerQueue;
	AppLaunchStatsREventHandler* aplsREventHandler;
	/*^block*/id pendingHandler;
	/*^block*/id recommendHandler;
	AppLaunchStatsScheduler* aplsScheduler;
	AppLaunchStatsDiag* aplsDiag;
	AppLaunchStatsNetwork* aplsNetworkMeter;
	BudgetPool* topicLimiter;
	NSMutableDictionary* topicAbleList;
	CDSession* topicSession;
	unsigned char prefUIKitFakeSwitch;
	int messageStatusAPSD;
	int resourceStatus;
	int externaltriggerType;
	NSDistributedNotificationCenter* distNotCenter;
	NSDate* lastDateOfAliveList;
	NSDate* lastExternalTrigTime;
	NSDate* timeOfLastFetch;
	NSDate* oneHourBudgetReset;
	NSNumber* batteryCapacity;
	NSRunLoop* aplsRunLoop;
	NSString* fakeBundleID;
	BOOL isClassCLocked;
	BOOL isAppForecastUpdating;
	BOOL isDataBudgetUpdating;
	BOOL isNoprewarmUpdating;
	BOOL isInternalInstall;
	BOOL isPowerBudgetsUpdating;
	BOOL lastFetchWasTooLongAgo;
	BOOL disableAllDueToSleep;
	BOOL disableFetch;
	BOOL disableHighPriorityPush;
	BOOL disableLowPriorityPush;
	BOOL disableTrending;
	BOOL enableCoreDuet;
	BOOL budgetsInitialized;
	int allowedMaxCount;
	int lockStateToken;
	int whiteListAppToken;
	int trendToken;
	int trendTokenLST;
	int pushListToken;
	int pushToken;
	int pushTokenLST;
	int configToken;
	int aplsNotifyToken;
	int semaphoreSigToken;
	int classCLockedToken;
	int displayStateToken;
	int pluggedInToken;
	int externalTrigToken;
	long long lowPriorityStartTime;
	NSObject*<OS_dispatch_queue> appLaunchStatDQueue;
	NSObject*<OS_dispatch_queue> appLaunchStatPushQueue;
	NSObject*<OS_dispatch_queue> delegateQueue;
	NSObject*<OS_dispatch_queue> budgetQueue;
	NSObject*<OS_dispatch_source> theTimer;
	NSObject*<OS_xpc_object> conn;
	id<AppLaunchStatsDelegate> delegate;
	CDSession* session;
	CDSession* budget_session;
	CDBudget* dataBudget;
	CDBudget* energyBudget;
	CDAttribute* bundleIdAttribute;
	NSMutableDictionary* meterTokenTracker;
	NSDate* periodicTimeTracker;

}

@property (nonatomic,readonly) AppLaunchStatsState * aplsState; 
@property (nonatomic,readonly) id pendingHandler; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> appLaunchStatDQueue; 
@property (nonatomic,readonly) NSObject*<OS_xpc_object> conn; 
-(void)restore:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(void)save:(id)arg1 ;
-(void)logAll:(asl_object_sRef)arg1 withMsg:(asl_object_sRef)arg2 withLevel:(int)arg3 ;
-(void)logLight:(asl_object_sRef)arg1 withMsg:(asl_object_sRef)arg2 withLevel:(int)arg3 ;
-(void)reloadConfiguration;
-(void)onTick;
-(AppLaunchStatsState *)aplsState;
-(void)removeAppFromLST:(id)arg1 ;
-(void)aplsSBMonitorEvent:(int)arg1 withBundleID:(id)arg2 ;
-(void)deleteAllEntriesInDB;
-(void)runPCtimerHeartBeat:(BOOL)arg1 ;
-(void)updateStateFromExternalNotification:(unsigned long long)arg1 ;
-(BOOL)isSpringBoardInstance;
-(void)initAfterClassCUnlocked;
-(void)initAfterClassCUnlockedForClient;
-(void)launchExternalTriggers:(unsigned long long)arg1 ;
-(void)updateTrendingBehavior:(unsigned long long)arg1 withBundleID:(id)arg2 ;
-(void)receiveIncomingLowPriorityPushList:(unsigned long long)arg1 ;
-(void)initSharedNotification;
-(void)receiveIncomingLowPriorityPushRequestForReservationStation:(id)arg1 ;
-(void)receiveConnectedStateNotification:(unsigned long long)arg1 ;
-(BOOL)hasOpportunisticFetchFeatureWithType:(id)arg1 withFetch:(int)arg2 ;
-(NSObject*<OS_dispatch_queue>)appLaunchStatDQueue;
-(void)whatToLaunch:(id)arg1 ;
-(void)setup_lstconnection;
-(void)initBudgets;
-(void)registerAppForTrending:(id)arg1 ;
-(void)testOneHourBudgetExpirytime;
-(void)updateDailyAppForecast;
-(void)resetBudgetPool;
-(void)resetBudgetPoolClient;
-(void)updateResourceAvailability;
-(void)updateAliveList;
-(void)replaceTimeSlot:(id)arg1 ;
-(void)retrieveAppScoresWithHandler:(/*^block*/id)arg1 ;
-(void)updateDailyDataBudget;
-(void)updateDailyPowerBudgets;
-(int)bundlePredictionZone:(id)arg1 launchzone:(int)arg2 top:(int)arg3 filter:(BOOL)arg4 ;
-(void)appActivityForecastStartingOnDate:(id)arg1 duration:(double)arg2 granularity:(int)arg3 appFilter:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)updatePowerBudgetPool;
-(void)updateDailyOutOfBandForecast;
-(void)testDatabaseAge:(/*^block*/id)arg1 ;
-(void)initRegisterNotifications;
-(void)setPendingWorkQueue:(id)arg1 ;
-(void)initChargeStatusMonitoring;
-(void)checkWifiChargerConnected;
-(void)testAndReleaseBlueList;
-(void)dataForecastStartingOnDate:(id)arg1 duration:(double)arg2 granularity:(int)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)carryDailyBudget:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)modifyPoolValue:(id)arg1 number:(long long)arg2 ;
-(id)convertTopicIDtoBundleID:(id)arg1 ;
-(void)ableAdmissionForTopic:(id)arg1 attribute:(id)arg2 value:(id)arg3 withHandler:(/*^block*/id)arg4 ;
-(void)triggerLaunchQueue:(id)arg1 ;
-(void)sendLSTxtqueriesWithMask:(unsigned long long)arg1 ;
-(void)readPool:(id)arg1 ;
-(id)defaultsDomainReadString:(id)arg1 ;
-(void)okToLaunchMessageFor:(id)arg1 forReasons:(id)arg2 withHandler:(/*^block*/id)arg3 ;
-(void)trendQueryLaunchApp:(/*^block*/id)arg1 ;
-(void)okToPassPushMessageForTopic:(id)arg1 onQueue:(id)arg2 withHandler:(/*^block*/id)arg3 ;
-(void)preWarmHasStarted:(id)arg1 withResult:(unsigned)arg2 withTriggerType:(int)arg3 withSequence:(unsigned long long)arg4 ;
-(void)preWarmHasEnded:(id)arg1 withResult:(unsigned)arg2 withTriggerType:(int)arg3 withSequence:(unsigned long long)arg4 ;
-(void)setAppLaunchRecommendationHandler:(/*^block*/id)arg1 ;
-(void)setAppLaunchStatsPendingDelegate:(id)arg1 queue:(id)arg2 ;
-(void)setAppLaunchStatsDelegate:(id)arg1 queue:(id)arg2 ;
-(void)setAppLaunchStatsPendingHandler:(/*^block*/id)arg1 queue:(id)arg2 ;
-(void)retrieveAppScoresWithQueryHandler:(/*^block*/id)arg1 ;
-(void)energyForecastStartingOnDate:(id)arg1 duration:(double)arg2 granularity:(int)arg3 completionHandler:(/*^block*/id)arg4 ;
-(BOOL)hasOpportunisticFetchFeature:(id)arg1 ;
-(id)doConvertTopicString:(id)arg1 withRange:(NSRange)arg2 withSubStringIndex:(unsigned)arg3 ;
-(void)setDelayLaunchFor:(id)arg1 with:(double)arg2 ;
-(id)pendingHandler;
-(NSObject*<OS_xpc_object>)conn;
@end

