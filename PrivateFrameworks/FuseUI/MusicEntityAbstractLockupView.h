/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:40:32 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/FuseUI.framework/FuseUI
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <FuseUI/FuseUI-Structs.h>
#import <UIKit/UIView.h>
#import <FuseUI/MPUTextDrawingCacheInvalidationObserver.h>
#import <FuseUI/MusicArtworkViewDelegate.h>
#import <FuseUI/MusicEntityViewPlaybackStatusObserving.h>

@protocol MusicEntityValueProviding;
@class MusicArtworkView, UITraitCollection, MusicEntityPlaybackStatus, MusicEntityPlaybackProgressApplier, MusicPlayButton, NSMutableArray, NSMapTable, UIImage, MusicEntityViewContentDescriptor, UIImageView, UIControl, NSString;

@interface MusicEntityAbstractLockupView : UIView <MPUTextDrawingCacheInvalidationObserver, MusicArtworkViewDelegate, MusicEntityViewPlaybackStatusObserving> {

	char _artworkConfigurationBlockEnabled;
	MusicArtworkView* _artworkView;
	UITraitCollection* _cachedTraitCollection;
	MusicEntityPlaybackStatus* _currentPlaybackStatus;
	char _hasDirtyPlaybackStatusUpdate;
	float _lastUsedArtworkViewAspectRatio;
	double _playbackCurrentTimeOriginatingTime;
	MusicEntityPlaybackProgressApplier* _playbackProgressApplier;
	MusicPlayButton* _playButton;
	NSMutableArray* _recycledTextButtons;
	NSMutableArray* _recycledTextDrawingViews;
	NSMapTable* _textDescriptorsToRecycledTextButtons;
	NSMapTable* _textDescriptorsToTextDrawingViews;
	char _entityDisabled;
	char _highlighted;
	char _usingPlaceholderArt;
	UIImage* _artworkOverrideImage;
	id<MusicEntityValueProviding> _entityValueProvider;
	MusicEntityPlaybackStatus* _playbackStatus;
	MusicEntityViewContentDescriptor* _contentDescriptor;

}

@property (nonatomic,retain) UIImage * artworkOverrideImage;                                                                                            //@synthesize artworkOverrideImage=_artworkOverrideImage - In the implementation block
@property (assign,getter=isEntityDisabled,nonatomic) char entityDisabled;                                                                               //@synthesize entityDisabled=_entityDisabled - In the implementation block
@property (nonatomic,retain) id<MusicEntityValueProviding> entityValueProvider;                                                                         //@synthesize entityValueProvider=_entityValueProvider - In the implementation block
@property (getter=isHighlighted,nonatomic,readonly) char highlighted;                                                                                   //@synthesize highlighted=_highlighted - In the implementation block
@property (nonatomic,copy) MusicEntityPlaybackStatus * playbackStatus;                                                                                  //@synthesize playbackStatus=_playbackStatus - In the implementation block
@property (getter=isUsingPlaceholderArt,nonatomic,readonly) char usingPlaceholderArt;                                                                   //@synthesize usingPlaceholderArt=_usingPlaceholderArt - In the implementation block
@property (setter=_setContentDescriptor:,getter=_contentDescriptor,nonatomic,retain) MusicEntityViewContentDescriptor * contentDescriptor;              //@synthesize contentDescriptor=_contentDescriptor - In the implementation block
@property (getter=_currentTextLabelAlpha,nonatomic,readonly) float _currentTextLabelAlpha; 
@property (getter=_artworkView,nonatomic,readonly) UIImageView * artworkView; 
@property (getter=_playButton,nonatomic,readonly) MusicPlayButton * playButton; 
@property (getter=_addButton,nonatomic,readonly) UIControl * addButton; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(float)_maximumTextHeightForTextDescriptors:(id)arg1 traitCollection:(id)arg2 ;
-(void)dealloc;
-(void)didMoveToWindow;
-(id)traitCollection;
-(void)traitCollectionDidChange:(id)arg1 ;
-(char)isHighlighted;
-(void)setHighlighted:(char)arg1 animated:(char)arg2 ;
-(id)_contentDescriptor;
-(void)_layoutArtworkViewWithAvailableContentBounds:(CGRect)arg1 layoutDirection:(int)arg2 usingBlock:(/*^block*/id)arg3 ;
-(void)_configurePlayButtonForLayingOverArtworkRelativeToFrame:(CGRect)arg1 ;
-(id)_artworkView;
-(void)_layoutPlayButtonUsingBlock:(/*^block*/id)arg1 ;
-(void)_getViewToProposedFrameMap:(id*)arg1 withTextDescriptors:(id)arg2 availableContentBounds:(CGRect)arg3 totalInsetContentBounds:(CGRect)arg4 totalTextHeight:(float*)arg5 ;
-(id)_viewForTextDescriptor:(id)arg1 ;
-(void)_setContentDescriptor:(id)arg1 ;
-(void)_contentDescriptorDidChange:(id)arg1 ;
-(void)_recycleTextViewsForTextDescriptors:(id)arg1 ;
-(void)_handlePlayButtonTappedWithAction:(unsigned)arg1 ;
-(void)setEntityDisabled:(char)arg1 ;
-(char)_shouldEnableArtworkViewUserInteraction;
-(char)_shouldArtworkViewRespectHighlightProperty;
-(void)setPlaybackStatus:(MusicEntityPlaybackStatus *)arg1 ;
-(void)_handleArtworkViewTapped;
-(void)_playbackStatusDidChange:(id)arg1 ;
-(void)_entityDisabledDidChange;
-(id)_effectiveArtworkBackgroundColor;
-(void)_handleContentDescriptorDidInvalidate:(id)arg1 ;
-(char)isEntityDisabled;
-(float)_currentTextLabelAlpha;
-(id)_newArtworkView;
-(void)_configureArtworkView:(id)arg1 forContentArtworkDescriptor:(id)arg2 entityValueProvider:(id)arg3 ;
-(void)_handleArtworkImageUpdate:(id)arg1 idealArtworkSize:(CGSize)arg2 ;
-(char)_shouldShowPlayButton;
-(void)_playButtonTapped:(id)arg1 ;
-(void)_configurePlayButtonVisualProperties:(id)arg1 ;
-(void)_applyPlaybackStatus:(id)arg1 ;
-(void)_artworkViewImageDidChange;
-(void)textDrawingCacheWasInvalidated:(id)arg1 ;
-(void)musicArtworkViewDidTouchUpInside:(id)arg1 ;
-(id)_addButton;
-(id)_playButton;
-(void)setArtworkOverrideImage:(UIImage *)arg1 ;
-(UIImage *)artworkOverrideImage;
-(MusicEntityPlaybackStatus *)playbackStatus;
-(char)isUsingPlaceholderArt;
-(void)setEntityValueProvider:(id<MusicEntityValueProviding>)arg1 ;
-(id<MusicEntityValueProviding>)entityValueProvider;
@end

