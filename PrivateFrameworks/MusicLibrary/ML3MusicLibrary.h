/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:41:28 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MusicLibrary/MusicLibrary-Structs.h>
#import <MusicLibrary/ML3DatabaseConnectionDelegate.h>
#import <MusicLibrary/ML3DatabaseConnectionPoolDelegate.h>

@protocol OS_dispatch_queue, ML3MusicLibraryDelegate;
@class NSObject, NSString, ML3AccountCacheDatabase, ML3LibraryNotificationManager, NSMutableDictionary, ML3DatabaseConnectionPool, NSArray, ML3Container, ML3DatabaseMetadata;

@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate> {

	NSObject*<OS_dispatch_queue> _serialQueue;
	NSString* _libraryUID;
	NSString* _syncLibraryUID;
	ML3AccountCacheDatabase* _accountCacheDatabase;
	ML3LibraryNotificationManager* _notificationManager;
	iPhoneSortKeyBuilderRef _sortKeyBuilder;
	NSMutableDictionary* _optimizedLibraryEntityFilterPredicatesByEntityClass;
	NSMutableDictionary* _optimizedLibraryContainerFilterPredicatesByContainerClass;
	NSMutableDictionary* _optimizedLibraryPublicEntityFilterPredicatesByEntityClass;
	NSMutableDictionary* _optimizedLibraryPublicContainerFilterPredicatesByContainerClass;
	char _isHomeSharingLibraryLoaded;
	char _isHomeSharingLibrary;
	id<ML3MusicLibraryDelegate> _delegate;
	ML3DatabaseConnectionPool* _connectionPool;
	NSString* _databasePath;
	NSArray* _libraryEntityFilterPredicates;
	NSArray* _libraryContainerFilterPredicates;
	NSArray* _libraryPublicEntityFilterPredicates;
	NSArray* _libraryPublicContainerFilterPredicates;

}

@property (nonatomic,readonly) char supportsUbiquitousPlaybackPositions; 
@property (assign,nonatomic,__weak) id<ML3MusicLibraryDelegate> delegate;                           //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) ML3DatabaseConnectionPool * connectionPool;                          //@synthesize connectionPool=_connectionPool - In the implementation block
@property (nonatomic,readonly) NSString * databasePath;                                             //@synthesize databasePath=_databasePath - In the implementation block
@property (nonatomic,readonly) NSString * libraryUID; 
@property (nonatomic,readonly) long long currentRevision; 
@property (nonatomic,readonly) long long currentContentRevision; 
@property (assign,nonatomic) long long syncGenerationID; 
@property (nonatomic,readonly) long long autoFilledTracksTotalSize; 
@property (assign,nonatomic) NSString * syncLibraryID; 
@property (nonatomic,readonly) ML3Container * currentDevicePurchasesPlaylist; 
@property (nonatomic,readonly) ML3Container * currentDevicePlaybackHistoryPlaylist; 
@property (nonatomic,readonly) ML3DatabaseMetadata * databaseInfo; 
@property (nonatomic,readonly) NSArray * localizedSectionIndexTitles; 
@property (nonatomic,readonly) NSArray * preferredAudioTracks; 
@property (nonatomic,readonly) NSArray * preferredSubtitleTracks; 
@property (assign,nonatomic) char isHomeSharingLibrary; 
@property (nonatomic,readonly) char mediaRestrictionEnabled; 
@property (assign,nonatomic) char companionDeviceActiveStoreAccountIsDynamiteEligible; 
@property (nonatomic,retain) NSArray * libraryEntityFilterPredicates;                               //@synthesize libraryEntityFilterPredicates=_libraryEntityFilterPredicates - In the implementation block
@property (nonatomic,retain) NSArray * libraryContainerFilterPredicates;                            //@synthesize libraryContainerFilterPredicates=_libraryContainerFilterPredicates - In the implementation block
@property (nonatomic,retain) NSArray * libraryPublicEntityFilterPredicates;                         //@synthesize libraryPublicEntityFilterPredicates=_libraryPublicEntityFilterPredicates - In the implementation block
@property (nonatomic,retain) NSArray * libraryPublicContainerFilterPredicates;                      //@synthesize libraryPublicContainerFilterPredicates=_libraryPublicContainerFilterPredicates - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)buildDatabaseFromHomeSharingLibrary:(id)arg1 atPath:(id)arg2 completionHandler:(/*^block*/id)arg3 progressHandler:(/*^block*/id)arg4 ;
+(void)buildDatabaseFromHomeSharingLibrary:(id)arg1 atPath:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
+(id)sectionIndexTitles;
+(id)pathForResourceFileOrFolder:(int)arg1 ;
+(id)mediaFolderPath;
+(char)updateTrackIntegrityOnConnection:(id)arg1 ;
+(char)deviceSupportsMultipleLibraries;
+(id)sharedLibraryDatabasePath;
+(id)indexSchemaSQL;
+(char)dropIndexesUsingConnection:(id)arg1 tableNames:(const char*)arg2 ;
+(id)sharedLibrary;
+(id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(char)arg3 createParentFolderIfNecessary:(char)arg4 ;
+(char)userVersionMatchesSystemUsingConnection:(id)arg1 ;
+(id)allTables;
+(char)orderingLanguageMatchesSystemUsingConnection:(id)arg1 ;
+(void)disableSharedLibrary;
+(void)disableAutomaticDatabaseValidation;
+(void)enableAutomaticDatabaseValidation;
+(id)localizedSectionHeaderForSectionHeader:(id)arg1 ;
+(id)localizedSectionIndexTitleForSectionHeader:(id)arg1 ;
+(id)sectionIndexTitleForSectionHeader:(id)arg1 ;
+(void)enumerateSortMapTablesUsingBlock:(/*^block*/id)arg1 ;
+(int)userVersionUsingConnection:(id)arg1 ;
+(id)allPragmaSQL;
+(id)allSchemaSQL;
+(id)allTriggersSQL;
+(id)sortMapNewSchemaSQL;
+(id)itemNewSchemaSQL;
+(id)itemIndexSchemaSQL;
+(id)mediaFolderPathByAppendingPathComponent:(id)arg1 ;
+(id)mediaFolderRelativePath:(id)arg1 ;
+(id)storeLinkSchemaSQL;
+(id)sortMapSchemaSQL;
+(id)itemSchemaSQL;
+(id)controlDirectoryPathWithBasePath:(id)arg1 ;
+(id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(char)arg3 isFolder:(char*)arg4 ;
+(id)pathForBaseLocationPath:(long long)arg1 ;
+(id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2 ;
+(id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3 ;
-(void)checkForChangesInHomeSharingLibrary:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)fillContainerForHomeSharingLibrary:(id)arg1 containerID:(long long)arg2 completionHandler:(/*^block*/id)arg3 ;
-(char)executeUpdateSQL:(id)arg1 ;
-(void)dealloc;
-(void)setDelegate:(id<ML3MusicLibraryDelegate>)arg1 ;
-(id<ML3MusicLibraryDelegate>)delegate;
-(id)initWithPath:(id)arg1 ;
-(void)retrieveBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkType:(int)arg3 retrievalTime:(double)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)enumerateArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkType:(int)arg3 usingBlock:(/*^block*/id)arg4 ;
-(void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkToken:(id)arg3 artworkType:(int)arg4 sourceType:(int)arg5 ;
-(char)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(int)arg3 sourceType:(int)arg4 mediaType:(unsigned long)arg5 ;
-(void)databaseConnectionAllowingWrites:(char)arg1 withBlock:(/*^block*/id)arg2 ;
-(void)performDatabaseTransactionWithBlock:(/*^block*/id)arg1 ;
-(id)checkoutWriterConnection;
-(void)notifyContentsDidChange;
-(void)checkInDatabaseConnection:(id)arg1 ;
-(char)isCurrentThreadInTransaction;
-(void)notifyNonContentsPropertyDidChange;
-(void)notifyInvisiblePropertyDidChange;
-(void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned)arg2 maximumRevisionType:(int)arg3 usingBlock:(/*^block*/id)arg4 ;
-(id)initWithPath:(id)arg1 readOnly:(char)arg2 populateUnitTestTablesBlock:(/*^block*/id)arg3 ;
-(void)_effectiveSettingsDidChangeNotification:(id)arg1 ;
-(void)_loggingSettingsDidChangeNotification:(id)arg1 ;
-(unsigned)_cacheDeleteUrgencyToMusicLibraryUrgency:(int)arg1 ;
-(long long)getPurgeableStorageSizeWithUrgency:(unsigned)arg1 ;
-(long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned)arg2 ;
-(void)_handleCacheDeleteNotification:(id)arg1 ;
-(void)_updateDatabaseConnectionsProfilingLevel;
-(char)setValue:(id)arg1 forDatabaseProperty:(id)arg2 ;
-(id)valueForDatabaseProperty:(id)arg1 ;
-(ML3DatabaseMetadata *)databaseInfo;
-(char)validateDatabase;
-(char)_canConfigureMediaLibraryDatabaseConnection:(id)arg1 ;
-(void)_configureMediaLibraryDatabaseConnection:(id)arg1 ;
-(void)_teardownMediaLibraryDatabaseConnection:(id)arg1 ;
-(id)checkoutReaderConnection;
-(char)_clearAllRowsFromTables:(id)arg1 ;
-(char)cleanupArtworkWithOptions:(unsigned)arg1 ;
-(void)accessSortKeyBuilder:(/*^block*/id)arg1 ;
-(unsigned)unknownSectionIndex;
-(void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2 ;
-(void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned)arg2 ;
-(void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned)arg2 ;
-(char)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(char)arg2 ;
-(void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(int)arg2 maximumRevisionType:(int)arg3 usingBlock:(/*^block*/id)arg4 ;
-(void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(/*^block*/id)arg4 ;
-(void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(int)arg2 mediaType:(unsigned long)arg3 completionHandler:(/*^block*/id)arg4 ;
-(char)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(int)arg2 sourceType:(int)arg3 relativePath:(id)arg4 ;
-(char)_updateBestArtworkTokensForArtworkToken:(id)arg1 artworkType:(int)arg2 sourceType:(int)arg3 usingConnection:(id)arg4 ;
-(void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1 ;
-(void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkType:(int)arg3 retrievalTime:(double)arg4 usingConnection:(id)arg5 ;
-(char)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(int)arg2 sourceType:(int)arg3 relativePath:(id)arg4 usingConnection:(id)arg5 ;
-(id)_allArtworkVariantDirectories;
-(void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkToken:(id)arg3 artworkType:(int)arg4 sourceType:(int)arg5 usingConnection:(id)arg6 ;
-(void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkType:(int)arg3 sourceType:(int)arg4 usingConnection:(id)arg5 ;
-(void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkType:(int)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(char)arg5 usingConnection:(id)arg6 ;
-(char)_determineAndUpdateBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkType:(int)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(char)arg5 usingConnection:(id)arg6 ;
-(char)isHomeSharingLibrary;
-(char)cleanupArtworkWithOptions:(unsigned)arg1 usingConnection:(id)arg2 ;
-(char)_removeOrphanedArtworkTokensUsingConnection:(id)arg1 ;
-(char)_removeOrphanedArtworkMetadataUsingConnection:(id)arg1 ;
-(char)_removeOrphanedArtworkAssetsUsingConnection:(id)arg1 ;
-(char)_removeInvalidAvailableArtworkTokensUsingConnection:(id)arg1 ;
-(void)removeOrphanedTracksOnlyInCaches:(char)arg1 ;
-(char)verifyPresignedValidity;
-(void)updateTrackIntegrity;
-(void)connectionWillOpenDatabase:(id)arg1 ;
-(void)connectionDidOpenDatabase:(id)arg1 ;
-(void)connectionWillCloseDatabase:(id)arg1 ;
-(void)connectionDidBeginDatabaseTransaction:(id)arg1 ;
-(void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(char)arg2 ;
-(void)connectionPool:(id)arg1 createdNewConnection:(id)arg2 ;
-(void)setIsHomeSharingLibrary:(char)arg1 ;
-(long long)currentRevision;
-(long long)currentContentRevision;
-(void)setSyncGenerationID:(long long)arg1 ;
-(long long)syncGenerationID;
-(void)setSyncLibraryID:(NSString *)arg1 ;
-(NSString *)syncLibraryID;
-(NSString *)libraryUID;
-(void)setLibraryUID:(NSString *)arg1 ;
-(ML3Container *)currentDevicePurchasesPlaylist;
-(ML3Container *)currentDevicePlaybackHistoryPlaylist;
-(NSArray *)localizedSectionIndexTitles;
-(NSArray *)preferredAudioTracks;
-(NSArray *)preferredSubtitleTracks;
-(char)mediaRestrictionEnabled;
-(char)companionDeviceActiveStoreAccountIsDynamiteEligible;
-(void)setCompanionDeviceActiveStoreAccountIsDynamiteEligible:(char)arg1 ;
-(void)setLibraryEntityFilterPredicates:(NSArray *)arg1 ;
-(void)setLibraryContainerFilterPredicates:(NSArray *)arg1 ;
-(void)setLibraryPublicEntityFilterPredicates:(NSArray *)arg1 ;
-(void)setLibraryPublicContainerFilterPredicates:(NSArray *)arg1 ;
-(id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1 ;
-(id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1 ;
-(void)reconnectToDatabase;
-(void)performReadOnlyDatabaseTransactionWithBlock:(/*^block*/id)arg1 ;
-(char)automaticDatabaseValidationDisabled;
-(int)currentDatabaseVersion;
-(char)createIndexes;
-(char)dropItemIndexes;
-(char)emptyAllTables;
-(char)clearAllGeniusData;
-(id)accountCacheDatabase;
-(char)populateStaticItemsOfDynamicContainers;
-(id)groupingKeyForString:(id)arg1 ;
-(id)groupingKeysForStrings:(id)arg1 ;
-(id)localizedSectionHeaderForSectionIndex:(unsigned)arg1 ;
-(unsigned)sectionIndexTitleIndexForSectionIndex:(unsigned)arg1 ;
-(void)notifyDisplayValuesPropertyDidChange;
-(void)notifySectionsDidChange;
-(void)notifyCloudLibraryAvailabilityDidChange;
-(void)notifyLibraryImportDidFinish;
-(void)saveTrackMetadata;
-(void)savePlaylists;
-(char)requiresSchemaOnlyUpdatesOnConnection:(id)arg1 ;
-(char)requiresNonSchemaUpdatesOnConnection:(id)arg1 ;
-(char)updateSortMap;
-(void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 inUsersLibrary:(char)arg5 usingBlock:(/*^block*/id)arg6 ;
-(void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(int)arg2 usingBlock:(/*^block*/id)arg3 ;
-(char)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(int)arg3 ;
-(unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned)arg2 maximumRevisionType:(int)arg3 ;
-(void)removeSource:(int)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(void)removeSource:(int)arg1 usingConnection:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(long long)autoFilledTracksTotalSize;
-(long long)autoFilledTracksTotalSizeWithUrgency:(unsigned)arg1 ;
-(long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned)arg2 respectSongMattress:(char)arg3 ;
-(long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 ;
-(long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned)arg2 ;
-(void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)arg1 ;
-(char)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(int)arg2 sourceType:(int)arg3 mediaType:(unsigned long)arg4 ;
-(char)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(int)arg3 sourceType:(int)arg4 mediaType:(unsigned long)arg5 ;
-(char)removeArtworkAssetWithToken:(id)arg1 ;
-(char)deleteArtworkToken:(id)arg1 ;
-(void)migrateExistingArtworkToken:(id)arg1 newArtworkToken:(id)arg2 newSourceType:(int)arg3 ;
-(void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(int)arg2 artworkType:(int)arg3 sourceType:(int)arg4 ;
-(char)isArtworkTokenAvailable:(id)arg1 ;
-(void)removeTombstonesForDeletedItems;
-(void)removeOrphanedTracks;
-(void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3 ;
-(char)deleteDatabaseProperty:(id)arg1 ;
-(void)migratePresignedValidity;
-(char)hasPresignedValidity;
-(void)deletePresignedValidity;
-(id)_newGeniusDBConnectionAtPath:(id)arg1 ;
-(ML3DatabaseConnectionPool *)connectionPool;
-(NSArray *)libraryEntityFilterPredicates;
-(NSArray *)libraryContainerFilterPredicates;
-(NSArray *)libraryPublicEntityFilterPredicates;
-(NSArray *)libraryPublicContainerFilterPredicates;
-(SCD_Struct_ML5)nameOrderForString:(id)arg1 ;
-(char)supportsUbiquitousPlaybackPositions;
-(id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2 ;
-(id)artistForArtistName:(id)arg1 seriesName:(id)arg2 ;
-(id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(char)arg5 ;
-(char)repairAlbumArtistRelationshipsWithConnection:(id)arg1 ;
-(char)_validateDatabaseUsingConnection:(id)arg1 error:(id*)arg2 ;
-(char)coerceValidDatabaseWithError:(id*)arg1 ;
-(char)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(char)arg2 ;
-(char)inTransactionUpdateSearchMapOnConnection:(id)arg1 ;
-(id)_systemUnicodeVersionData;
-(char)coalesceMismatchedCollectionsUsingConnection:(id)arg1 ;
-(id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(char*)arg2 ;
-(char)_coalesceMismatchedCollectionClass:(Class)arg1 usingConnection:(id)arg2 ;
-(char)updateSortMapOnConnection:(id)arg1 ;
-(char)validateSortMapUnicodeVersionOnConnection:(id)arg1 ;
-(id)insertStringsIntoSortMap:(id)arg1 ;
-(long long)insertStringIntoSortMapNoTransaction:(id)arg1 ;
-(id)genreForGenre:(id)arg1 ;
-(id)composerForComposerName:(id)arg1 ;
-(id)albumArtistForEffectiveAlbumArtistName:(id)arg1 ;
-(char)updateSystemPlaylistNamesForCurrentLanguage;
-(void)updateOrderingLanguagesForCurrentLanguage;
-(char)getAutoFilledTracksArePurgeable;
-(long long)getPurgeableStorageSizeWithUrgency:(unsigned)arg1 includeAutoFilledTracks:(char)arg2 ;
-(long long)_getDatabaseFileFreeSpace;
-(long long)_getPurgeableTracksTotalSizeWithUrgency:(unsigned)arg1 includeAutoFilledTracks:(char)arg2 ;
-(long long)_getPurgeableArtworkTotalSizeWithUrgency:(unsigned)arg1 ;
-(long long)_getPurgeableDatabaseFileSizeWithUrgency:(unsigned)arg1 ;
-(long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned)arg2 includeAutoFilledTracks:(char)arg3 ;
-(long long)_clearDatabaseFileFreeSpace;
-(long long)_clearOrphanedAssetsOfAmount:(long long)arg1 withUrgency:(unsigned)arg2 ;
-(long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned)arg2 includeAutoFilledTracks:(char)arg3 ;
-(long long)_clearPurgeableArtworkOfAmount:(long long)arg1 withUrgency:(unsigned)arg2 ;
-(long long)_clearPurgeableDatabaseFilesOfAmount:(long long)arg1 withUrgency:(unsigned)arg2 ;
-(long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned)arg2 includeCloudAssets:(char)arg3 includeAutoFilledTracks:(char)arg4 ;
-(long long)_getArtworkTotalSize;
-(void)_enumeratePurgeableTracksForUrgency:(unsigned)arg1 includeAutoFilledTracks:(char)arg2 includeCloudAssets:(char)arg3 usingBlock:(/*^block*/id)arg4 ;
-(id)_purgeableTrackPredicateWithUrgency:(unsigned)arg1 includeAutoFilledTracks:(char)arg2 includeCloudAssets:(char)arg3 ;
-(id)_allKeepLocalPlaylistTracks;
-(id)_notInKeepLocalCollectionPredicate;
-(long long)_clearAllCloudAssets;
-(long long)_getCloudAssetsTotalSize;
-(long long)getPurgeableStorageSize;
-(long long)clearPurgeableStorageAmount:(long long)arg1 ;
-(long long)clearAllRemovedTracks;
-(void)setAutoFilledTracksArePurgeable:(char)arg1 ;
-(id)uppService;
-(void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1 ;
-(void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1 ;
-(long long)syncIdFromMultiverseId:(id)arg1 ;
-(char)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id*)arg2 ;
-(NSString *)databasePath;
@end

