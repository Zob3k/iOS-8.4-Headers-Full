/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:41:30 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol ML3DatabaseConnectionDelegate;
#import <MusicLibrary/MusicLibrary-Structs.h>
@class ML3DatabaseStatementCache, NSMutableArray, ML3DatabaseConnectionPool, NSString, NSUUID;

@interface ML3DatabaseConnection : NSObject {

	sqlite3Ref _sqlitedb;
	char _isOpen;
	ML3DatabaseStatementCache* _statementCache;
	unsigned _statementsSinceLastCheckpoint;
	unsigned _transactionLevel;
	char _nestedTransactionWantsToRollback;
	NSMutableArray* _enqueuedTransactionCommitBlocks;
	ML3DatabaseConnectionPool* _owningPool;
	NSMutableArray* _registeredFunctions;
	NSMutableArray* _registeredModules;
	int _profilingLevel;
	NSString* _lastTracedStatement;
	int _willDeleteDatabaseNotifyToken;
	char _isReadOnly;
	char _automaticCheckpointingEnabled;
	char _logQueryPlans;
	id<ML3DatabaseConnectionDelegate> _connectionDelegate;
	NSString* _databasePath;
	unsigned _journalingMode;
	unsigned _protectionLevel;
	NSUUID* _currentTransactionID;
	NSUUID* _uniqueIdentifier;
	const void* _iTunesExtensions;
	unsigned _checkpointStatementThreshold;

}

@property (assign,nonatomic,__weak) id<ML3DatabaseConnectionDelegate> connectionDelegate;              //@synthesize connectionDelegate=_connectionDelegate - In the implementation block
@property (nonatomic,readonly) NSString * databasePath;                                                //@synthesize databasePath=_databasePath - In the implementation block
@property (nonatomic,readonly) char isOpen; 
@property (assign,setter=setReadOnly:,nonatomic) char isReadOnly;                                      //@synthesize isReadOnly=_isReadOnly - In the implementation block
@property (assign,nonatomic) unsigned journalingMode;                                                  //@synthesize journalingMode=_journalingMode - In the implementation block
@property (assign,nonatomic) unsigned protectionLevel;                                                 //@synthesize protectionLevel=_protectionLevel - In the implementation block
@property (nonatomic,readonly) char isInTransaction; 
@property (nonatomic,readonly) char transactionMarkedForRollBack; 
@property (nonatomic,readonly) NSUUID * currentTransactionID;                                          //@synthesize currentTransactionID=_currentTransactionID - In the implementation block
@property (assign,nonatomic) int profilingLevel; 
@property (nonatomic,readonly) NSUUID * uniqueIdentifier;                                              //@synthesize uniqueIdentifier=_uniqueIdentifier - In the implementation block
@property (assign,nonatomic) const void* iTunesExtensions;                                             //@synthesize iTunesExtensions=_iTunesExtensions - In the implementation block
@property (assign,nonatomic) char automaticCheckpointingEnabled;                                       //@synthesize automaticCheckpointingEnabled=_automaticCheckpointingEnabled - In the implementation block
@property (assign,nonatomic) unsigned checkpointStatementThreshold;                                    //@synthesize checkpointStatementThreshold=_checkpointStatementThreshold - In the implementation block
@property (assign,nonatomic) char logQueryPlans;                                                       //@synthesize logQueryPlans=_logQueryPlans - In the implementation block
-(void)dealloc;
-(id)init;
-(char)isEqual:(id)arg1 ;
-(id)description;
-(void)flush;
-(char)close;
-(NSUUID *)uniqueIdentifier;
-(char)open;
-(char)isInTransaction;
-(id)_prepareStatement:(id)arg1 error:(id*)arg2 ;
-(char)_executeStatement:(id)arg1 withError:(id*)arg2 ;
-(sqlite3Ref)_sqliteHandle;
-(id)sqliteError;
-(char)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3 ;
-(void)enqueueBlockForTransactionCommit:(/*^block*/id)arg1 ;
-(char)performTransactionWithBlock:(/*^block*/id)arg1 ;
-(id)executeQuery:(id)arg1 withParameters:(id)arg2 ;
-(char)pushTransaction;
-(char)popTransactionAndCommit:(char)arg1 ;
-(NSUUID *)currentTransactionID;
-(char)executeUpdate:(id)arg1 ;
-(char)schemaDeleteColumns:(id)arg1 inTable:(id)arg2 ;
-(char)schemaRenameColumn:(id)arg1 inTable:(id)arg2 toNewColumnName:(id)arg3 ;
-(char)schemaAddColumnDefinition:(id)arg1 toTable:(id)arg2 ;
-(char)schemaDeleteColumn:(id)arg1 inTable:(id)arg2 ;
-(id)executeQuery:(id)arg1 ;
-(void)setConnectionDelegate:(id<ML3DatabaseConnectionDelegate>)arg1 ;
-(char)pushTransactionUsingBehaviorType:(unsigned)arg1 ;
-(id)initWithDatabasePath:(id)arg1 ;
-(char)databasePathExists;
-(char)tableExists:(id)arg1 ;
-(char)isOpen;
-(char)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(/*function pointer*/void*)arg3 ;
-(char)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(/*^block*/id)arg3 ;
-(void)setITunesExtensions:(const void*)arg1 ;
-(const void*)iTunesExtensions;
-(char)deleteDatabase;
-(char)schemaInsertColumnDefinitions:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned)arg3 ;
-(void)_enumerateTableColumnNamesAndDefinitionsFromTable:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(char)_alterTableNamed:(id)arg1 withNewColumnDefinitions:(id)arg2 newColumnNames:(id)arg3 oldColumnNames:(id)arg4 ;
-(char)schemaInsertColumnDefinition:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned)arg3 ;
-(id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4 ;
-(id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(char)arg4 ;
-(long long)lastInsertionRowID;
-(char)registerModule:(id)arg1 ;
-(unsigned)journalingMode;
-(void)_ensureConnectionIsOpen;
-(char)_handleBusyLockWithNumberOfRetries:(int)arg1 ;
-(void)_handleDatabaseCorruption;
-(void)setReadOnly:(char)arg1 ;
-(void)_setOwningPool:(id)arg1 ;
-(void)setProfilingLevel:(int)arg1 ;
-(void)setJournalingMode:(unsigned)arg1 ;
-(char)_isSharedMediaLibraryDatabase;
-(void)_updateProfilingLevel;
-(char)_openWithFlags:(int)arg1 ;
-(char)_databaseFilesAreWritable;
-(void)_createDatabaseDirectoryIfNonexistent;
-(id)_databaseFilePaths;
-(void)_finalizeAllStatements;
-(char)_handleZombieSQLiteConnection:(sqlite3Ref)arg1 ;
-(void)_logCurrentError;
-(char)popToRootTransactionAndCommit:(char)arg1 ;
-(void)_resetUnfinalizedStatements;
-(id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4 ;
-(char)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3 ;
-(char)_internalBeginTransactionWithBehaviorType:(unsigned)arg1 ;
-(char)_internalEndTransactionAndCommit:(char)arg1 ;
-(void)_executeTransactionCommitBlocks:(char)arg1 ;
-(char)performTransactionWithBlock:(/*^block*/id)arg1 usingBehaviorType:(unsigned)arg2 ;
-(char)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(/*function pointer*/void*)arg3 userData:(void*)arg4 ;
-(id)_registeredModuleNamed:(id)arg1 ;
-(char)_validatePreparedStatement:(id)arg1 error:(id*)arg2 ;
-(char)logQueryPlans;
-(void)setLogQueryPlans:(char)arg1 ;
-(void)_internalLogQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4 ;
-(int)checkpointDatabase;
-(char)_databaseFileExists;
-(int)profilingLevel;
-(void)setCurrentTransactionID:(NSUUID *)arg1 ;
-(char)transactionMarkedForRollBack;
-(char)registerModuleName:(id)arg1 moduleMethods:(sqlite3_module*)arg2 ;
-(id)_owningPool;
-(unsigned)_transactionLevel;
-(void)_setTransactionLevel:(unsigned)arg1 ;
-(id)_shortDescription;
-(void)_createDatabaseFileIfNonexistent;
-(void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2 ;
-(void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2 ;
-(void)_handleDatabaseTraceStatement:(const char*)arg1 ;
-(void)_handleDatabaseProfileStatement:(const char*)arg1 executionTimeNS:(unsigned long long)arg2 ;
-(id<ML3DatabaseConnectionDelegate>)connectionDelegate;
-(unsigned)protectionLevel;
-(void)setProtectionLevel:(unsigned)arg1 ;
-(char)automaticCheckpointingEnabled;
-(void)setAutomaticCheckpointingEnabled:(char)arg1 ;
-(unsigned)checkpointStatementThreshold;
-(void)setCheckpointStatementThreshold:(unsigned)arg1 ;
-(char)isReadOnly;
-(NSString *)databasePath;
@end

