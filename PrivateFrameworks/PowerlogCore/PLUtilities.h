/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:42:05 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/PowerlogCore.framework/PowerlogCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <PowerlogCore/PowerlogCore-Structs.h>
@interface PLUtilities : NSObject
+(void)postNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3 ;
+(id)processNameForPid:(int)arg1 ;
+(id)workQueueForKey:(id)arg1 ;
+(void)handleSQLResult:(int)arg1 ;
+(id)shortUUIDString;
+(void)setMobileOwnerForFile:(id)arg1 ;
+(id)extractDateStringAndUUIDStringFromFilePath:(id)arg1 ;
+(char)runningAsMobileUser;
+(id)runningAsUser;
+(void)_deallocatePortArray:(unsigned*)arg1 withCount:(unsigned)arg2 ;
+(id)modeForEntryKey:(id)arg1 withKeyName:(id)arg2 ;
+(short)canLogMode:(id)arg1 fullMode:(char)arg2 ;
+(int)getDisplayTypeOfDevice;
+(int)getTorchTypeOfDevice;
+(char)gasGaugeEnabled;
+(unsigned long long)dispatchTimeInSeconds:(double)arg1 ;
+(unsigned)pidForName:(id)arg1 ;
+(id)hashString:(id)arg1 ;
+(short)logModeForEntryKey:(id)arg1 withKey:(id)arg2 andValue:(id)arg3 ;
+(char)isValidString:(id)arg1 ;
+(id)torchTypeStringQuery;
+(double)scaledPowerBasedOnPoint:(double)arg1 withPowerModel:(id)arg2 ;
+(id)workQueue;
+(int)MavRev;
+(char)internalBuild;
+(id)deviceBootTime;
+(char)isWiFiChipset4330;
+(char)isWiFiChipset43291;
+(char)isWiFiChipset4334;
+(char)isWiFiChipset43342;
+(char)isWiFiChipset4324;
+(char)isWiFiChipset4345;
+(char)isWiFiChipset4350;
+(id)dateFromTimeval:(timeval)arg1 ;
+(double)secondsFromMachTime:(unsigned long long)arg1 ;
+(id)displayTypeStringQuery;
+(int)getAudioRevOfDevice;
+(char)nonUIBuild;
+(double)defaultBatteryEnergyCapacity;
+(char)isMav10;
+(char)isMav7;
+(char)isMav1;
+(char)isMav2;
+(char)isMav4;
+(char)isICE;
+(char)hasBaseband;
+(id)MavRevStringQuery;
+(char)isMav5;
+(char)isIPod;
+(char)isPingPongChargingWith:(char)arg1 andBatteryLevelPercent:(double)arg2 ;
+(char)alsCurveHigherThanDefault;
+(id)workQueueForClass:(Class)arg1 ;
+(int)getProcessorRevOfDevice;
+(id)allSubClassesForClass:(Class)arg1 ;
@end

