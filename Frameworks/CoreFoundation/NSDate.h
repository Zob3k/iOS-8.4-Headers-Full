/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:36:40 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CoreFoundation/CoreFoundation-Structs.h>
#import <CoreFoundation/NSCopying.h>
#import <CoreFoundation/NSSecureCoding.h>
#import <CoreFoundation/CKRecordValue.h>

@class NSString;

@interface NSDate : NSObject <NSCopying, NSSecureCoding, CKRecordValue>

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) double timeIntervalSinceReferenceDate; 
+(char)acceptsTopLevelLeaves;
+(char)parsingLeafNode;
+(char)parsingWithSubItems;
+(char)frontingBasicTypes;
+(char)notifyOfUnknownTokens;
+(id)dateWithActiveSyncString:(id)arg1 ;
+(id)dateWithActiveSyncStringWithoutSeparators:(id)arg1 ;
+(id)dateWithActiveSyncStringFromYearMonthDay:(id)arg1 ;
+(id)bod;
+(id)eod;
+(int)daysSpannedFromStartDate:(id)arg1 toEndDate:(id)arg2 allDay:(char)arg3 inCalendar:(id)arg4 ;
+(id)CalDateForNow;
+(id)_nowComponents;
+(id)_todayComponents;
+(id)CalDateForBeginningOfToday;
+(id)_tomorrowComponents;
+(id)CalDateForEndOfToday;
+(id)CalDateForBeginningOfTomorrow;
+(id)CalDateForEndOfTomorrow;
+(id)dateWithDatePartFromDate:(id)arg1 timePartFromDate:(id)arg2 inCalendar:(id)arg3 ;
+(id)nextRoundedHour;
+(id)modificationDateForNoteBeingEdited;
+(id)_geo_calendar;
+(id)geo_dateWithJulianDay:(double)arg1 ;
+(id)mf_copyDateInCommonFormatsWithString:(id)arg1 ;
+(id)mf_copyLenientDateInCommonFormatsWithString:(id)arg1 ;
+(int)daysSince1970;
+(id)dateForDaysSince1970:(int)arg1 ;
+(id)dateWithNaturalLanguageString:(id)arg1 date:(id)arg2 locale:(id)arg3 ;
+(id)dateWithNaturalLanguageString:(id)arg1 ;
+(id)dateWithNaturalLanguageString:(id)arg1 locale:(id)arg2 ;
+(id)dateWithDate:(id)arg1 ;
+(id)dateWithString:(id)arg1 ;
+(double)timeIntervalSinceReferenceDate;
+(id)distantFuture;
+(id)date;
+(id)dateWithTimeIntervalSinceNow:(double)arg1 ;
+(id)distantPast;
+(id)allocWithZone:(NSZone*)arg1 ;
+(char)supportsSecureCoding;
+(id)dateWithTimeIntervalSinceReferenceDate:(double)arg1 ;
+(id)dateWithTimeIntervalSince1970:(double)arg1 ;
+(id)dateWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
-(id)tzDateToDateInGMT:(id)arg1 ;
-(id)gmtDateToDateInTimeZone:(id)arg1 ;
-(id)nearestMidnight;
-(id)activeSyncString;
-(id)activeSyncStringWithoutSeparators;
-(id)activeSyncStringForYearMonthDay;
-(id)plistArchiveWithCPLArchiver:(id)arg1 ;
-(id)initWithCPLArchiver:(id)arg1 ;
-(char)isSameDayAsDate:(id)arg1 ;
-(char)isAfterDate:(id)arg1 ;
-(char)isBeforeDate:(id)arg1 ;
-(char)isWholeHour;
-(id)mf_descriptionForMimeHeaders;
-(id)mf_replyPrefixForSender:(id)arg1 ;
-(id)dateInTimeZone:(id)arg1 fromTimeZone:(id)arg2 ;
-(id)dateForDayInTimeZone:(id)arg1 ;
-(id)dateForEndOfDayInTimeZone:(id)arg1 ;
-(id)dateForDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2 ;
-(id)dateForEndOfDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2 ;
-(char)CalIsBeforeOrSameAsDate:(id)arg1 ;
-(char)CalIsBeforeDate:(id)arg1 ;
-(char)CalIsAfterOrSameAsDate:(id)arg1 ;
-(char)CalIsAfterDate:(id)arg1 ;
-(char)isAfterDate:(id)arg1 ;
-(char)isBeforeDate:(id)arg1 ;
-(id)timeStringAlwaysIncludeMinutes:(char)arg1 ;
-(id)dateOnlyComponentsInCalendar:(id)arg1 ;
-(id)dateRemovingTimeComponentsInCalendar:(id)arg1 ;
-(id)allComponentsInCalendar:(id)arg1 ;
-(id)dateByAddingDays:(int)arg1 inCalendar:(id)arg2 ;
-(id)timeOnlyComponentsInCalendar:(id)arg1 ;
-(char)isEqualToDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(int)compareDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(int)minuteInCalendar:(id)arg1 ;
-(id)dateByAddingMinutes:(int)arg1 inCalendar:(id)arg2 ;
-(int)hourInCalendar:(id)arg1 ;
-(id)dateRoundedToHourOnSameDayInCalendar:(id)arg1 ;
-(id)localizedDateStringWithTemplate:(id)arg1 ;
-(int)weekInCalendar:(id)arg1 ;
-(id)_stringWithUseAbbreviatedFormats:(char)arg1 lowerCase:(char)arg2 ;
-(id)localizedWeekdayMonthDayStringShortened:(char)arg1 ;
-(char)CalIsBetweenStartDate:(id)arg1 endDate:(id)arg2 ;
-(id)dateOnlyByTranslatingFrom:(id)arg1 toCalendar:(id)arg2 ;
-(int)yearInCalendar:(id)arg1 ;
-(int)monthInCalendar:(id)arg1 ;
-(int)dayInCalendar:(id)arg1 ;
-(int)weekdayInCalendar:(id)arg1 ;
-(int)secondInCalendar:(id)arg1 ;
-(id)dateByAddingHours:(int)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingWeeks:(int)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingMonths:(int)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingYears:(int)arg1 inCalendar:(id)arg2 ;
-(id)roundSecondsDownInCalendar:(id)arg1 ;
-(id)roundToCurrentDayInCalendar:(id)arg1 ;
-(id)roundToCurrentWeekInCalendar:(id)arg1 withFirstWeekdayIndex:(int)arg2 ;
-(id)roundToCurrentMondayInCalendar:(id)arg1 ;
-(id)roundToCurrentMonthInCalendar:(id)arg1 ;
-(id)roundToCurrentYearInCalendar:(id)arg1 ;
-(char)isSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isSameMonthAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isSameYearAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isBeforeDayForDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isBeforeOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isAfterOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isTodayInCalendar:(id)arg1 ;
-(id)dateRoundedToNearestFifteenMinutesInCalendar:(id)arg1 ;
-(id)dateRoundedToStartOfNextDayInCalendar:(id)arg1 ;
-(void)printComparisonToDate:(id)arg1 ;
-(id)localizedMonthShortened:(char)arg1 ;
-(id)localizedMonthAndYearStringShortened:(char)arg1 ;
-(id)localizedMonthAndDayStringShortened:(char)arg1 ;
-(id)localizedYearMonthAndDayStringShortened:(char)arg1 ;
-(id)localizedWeekdayMonthDayYearStringShortened:(char)arg1 ;
-(id)localizedWeekdayMonthYearStringShortened:(char)arg1 ;
-(id)localizedWeekNumber;
-(id)localizedRelativeDateStringShortened:(char)arg1 ;
-(id)ml_stringValueForSQL;
-(void)ml_bindToSQLiteStatement:(sqlite3_stmtRef)arg1 atPosition:(int)arg2 ;
-(double)geo_julianDay;
-(double)geo_hoursAndMinutes;
-(double)geo_julianEphemerisDay;
-(id)copyXPCEncoding;
-(id)initWithXPCEncoding:(id)arg1 ;
-(char)isAfterDate:(id)arg1 ;
-(char)isBeforeDate:(id)arg1 ;
-(int)daysSince1970;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(int)_web_compareDay:(id)arg1 ;
-(id)_web_RFC1123DateString;
-(char)_web_isToday;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(Class)classForCoder;
-(id)descriptionWithCalendarFormat:(id)arg1 timeZone:(id)arg2 locale:(id)arg3 ;
-(id)dateWithCalendarFormat:(id)arg1 timeZone:(id)arg2 ;
-(char)isNSDate__;
-(unsigned long)_cfTypeID;
-(id)initWithDate:(id)arg1 ;
-(id)addTimeInterval:(double)arg1 ;
-(char)isInToday;
-(char)isInTomorrow;
-(char)isInYesterday;
-(char)isInSameDayAsDate:(id)arg1 ;
-(char)isEqual:(id)arg1 toUnitGranularity:(unsigned)arg2 ;
-(int)compare:(id)arg1 toUnitGranularity:(unsigned)arg2 ;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned)hash;
-(NSString *)description;
-(int)compare:(id)arg1 ;
-(double)timeIntervalSinceReferenceDate;
-(double)timeIntervalSinceDate:(id)arg1 ;
-(double)timeIntervalSinceNow;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)initWithTimeIntervalSinceNow:(double)arg1 ;
-(id)initWithString:(id)arg1 ;
-(char)isEqualToDate:(id)arg1 ;
-(id)laterDate:(id)arg1 ;
-(id)earlierDate:(id)arg1 ;
-(id)dateByAddingTimeInterval:(double)arg1 ;
-(id)initWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
-(id)initWithTimeIntervalSinceReferenceDate:(double)arg1 ;
-(double)timeIntervalSince1970;
-(id)descriptionWithLocale:(id)arg1 ;
-(id)initWithTimeIntervalSince1970:(double)arg1 ;
@end

