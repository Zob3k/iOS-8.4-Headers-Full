/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:36:47 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/Frameworks/EventKit.framework/EventKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <EventKit/EventKit-Structs.h>
#import <EventKit/EKDaemonConnection.h>

@protocol OS_dispatch_queue;
@class NSMutableDictionary, NSMutableSet, NSNumber, EKCalendar, EKDaemonConnection, NSTimeZone, NSObject, NSString, NSArray, EKAlarm;

@interface EKEventStore : NSObject <EKDaemonConnection> {

	NSMutableDictionary* _registeredObjects;
	NSMutableDictionary* _publicRegisteredObjects;
	NSMutableSet* _insertedObjects;
	NSMutableSet* _deletedObjects;
	NSMutableSet* _updatedObjects;
	NSNumber* _defaultTimedAlarmOffset;
	NSNumber* _defaultAllDayAlarmOffset;
	EKCalendar* _defaultCalendarForNewEvents;
	EKCalendar* _defaultCalendarForNewReminders;
	EKDaemonConnection* _database;
	unsigned long _flags;
	NSTimeZone* _timeZone;
	NSMutableDictionary* _calendars;
	NSMutableDictionary* _sources;
	NSMutableSet* _objectsPendingCommit;
	NSObject*<OS_dispatch_queue> _calendarQueue;
	NSObject*<OS_dispatch_queue> _registeredQueue;
	NSObject*<OS_dispatch_queue> _unsavedChangesQueue;
	NSObject*<OS_dispatch_queue> _dbChangedQueue;
	NSMutableDictionary* _cachedValidatedEmails;
	double _lastDatabaseNotificationTimestamp;

}

@property (nonatomic,readonly) NSString * eventStoreIdentifier; 
@property (nonatomic,readonly) NSArray * calendars; 
@property (nonatomic,readonly) EKCalendar * defaultCalendarForNewEvents; 
@property (nonatomic,copy) NSTimeZone * timeZone;                                           //@synthesize timeZone=_timeZone - In the implementation block
@property (nonatomic,readonly) EKAlarm * defaultTimedAlarm; 
@property (nonatomic,readonly) EKAlarm * defaultAllDayAlarm; 
@property (nonatomic,readonly) int unacknowledgedEventCount; 
@property (nonatomic,readonly) int notifiableEventCount; 
@property (nonatomic,readonly) NSArray * eventNotifications; 
@property (nonatomic,readonly) NSArray * inboxRepliedSectionItems; 
@property (nonatomic,readonly) NSArray * reminderNotifications; 
@property (assign,nonatomic) char showDeclinedEvents; 
@property (readonly) EKDaemonConnection * connection; 
@property (assign,nonatomic) NSMutableDictionary * registeredObjects;                       //@synthesize registeredObjects=_registeredObjects - In the implementation block
@property (assign,nonatomic) NSMutableDictionary * publicRegisteredObjects;                 //@synthesize publicRegisteredObjects=_publicRegisteredObjects - In the implementation block
@property (assign,nonatomic) NSMutableSet * insertedObjects;                                //@synthesize insertedObjects=_insertedObjects - In the implementation block
@property (assign,nonatomic) NSMutableSet * deletedObjects;                                 //@synthesize deletedObjects=_deletedObjects - In the implementation block
@property (assign,nonatomic) NSMutableSet * updatedObjects;                                 //@synthesize updatedObjects=_updatedObjects - In the implementation block
@property (assign,nonatomic) NSMutableSet * objectsPendingCommit;                           //@synthesize objectsPendingCommit=_objectsPendingCommit - In the implementation block
@property (nonatomic,retain) NSNumber * defaultTimedAlarmOffset;                            //@synthesize defaultTimedAlarmOffset=_defaultTimedAlarmOffset - In the implementation block
@property (nonatomic,retain) NSNumber * defaultAllDayAlarmOffset;                           //@synthesize defaultAllDayAlarmOffset=_defaultAllDayAlarmOffset - In the implementation block
@property (nonatomic,retain) EKCalendar * _defaultCalendarForNewEvents;                     //@synthesize defaultCalendarForNewEvents=_defaultCalendarForNewEvents - In the implementation block
@property (nonatomic,retain) EKCalendar * _defaultCalendarForNewReminders;                  //@synthesize defaultCalendarForNewReminders=_defaultCalendarForNewReminders - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * _calendars;                              //@synthesize calendars=_calendars - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * _sources;                                //@synthesize sources=_sources - In the implementation block
@property (nonatomic,retain) EKDaemonConnection * database;                                 //@synthesize database=_database - In the implementation block
@property (assign,nonatomic) double lastDatabaseNotificationTimestamp;                      //@synthesize lastDatabaseNotificationTimestamp=_lastDatabaseNotificationTimestamp - In the implementation block
@property (assign,nonatomic) unsigned long flags;                                           //@synthesize flags=_flags - In the implementation block
@property (assign,nonatomic) NSObject*<OS_dispatch_queue> calendarQueue;                    //@synthesize calendarQueue=_calendarQueue - In the implementation block
@property (assign,nonatomic) NSObject*<OS_dispatch_queue> registeredQueue;                  //@synthesize registeredQueue=_registeredQueue - In the implementation block
@property (assign,nonatomic) NSObject*<OS_dispatch_queue> unsavedChangesQueue;              //@synthesize unsavedChangesQueue=_unsavedChangesQueue - In the implementation block
@property (assign,nonatomic) NSObject*<OS_dispatch_queue> dbChangedQueue;                   //@synthesize dbChangedQueue=_dbChangedQueue - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * _cachedValidatedEmails;                  //@synthesize cachedValidatedEmails=_cachedValidatedEmails - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(int)authorizationStatusForEntityType:(unsigned)arg1 ;
+(Class)classForEntityName:(id)arg1 ;
+(Class)publicClassForEntityName:(id)arg1 ;
-(id)colorForCalendar:(id)arg1 ;
-(id)_uicolorFromString:(id)arg1 ;
-(id)symbolicNameToUIColors;
-(id)colorNamesInRainbowOrder;
-(id)localizedStringForSymbolicColorName:(id)arg1 ;
-(id)defaultCalendarColorsInRainbowOrder;
-(id)stringForColor:(id)arg1 ;
-(void)setDeletedObjects:(NSMutableSet *)arg1 ;
-(void)setInsertedObjects:(NSMutableSet *)arg1 ;
-(void)setUpdatedObjects:(NSMutableSet *)arg1 ;
-(id)initWithOptions:(unsigned long)arg1 path:(id)arg2 ;
-(char)isDataProtected;
-(void)_requestAccessForEntityType:(unsigned)arg1 ;
-(void)_accessStatusChanged;
-(void)requestAccessToEntityType:(unsigned)arg1 completion:(/*^block*/id)arg2 ;
-(void)_unregisterObject:(id)arg1 ;
-(void)set_defaultCalendarForNewEvents:(EKCalendar *)arg1 ;
-(void)set_defaultCalendarForNewReminders:(EKCalendar *)arg1 ;
-(void)_validateObjectIDs:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_databaseChangedExternally;
-(id)registerFetchedObjectWithID:(id)arg1 ;
-(char)commit:(id*)arg1 ;
-(id)_allCalendars;
-(void)_saveWithoutNotify;
-(id)registerFetchedObjectWithID:(id)arg1 withDefaultLoadedProperties:(id)arg2 inSet:(id)arg3 ;
-(char)_calendar:(id)arg1 supportsEntityType:(unsigned)arg2 ;
-(id)_calendarWithID:(id)arg1 ;
-(char)saveCalendar:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)removeCalendar:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(void)_addObjectToPendingCommits:(id)arg1 ;
-(char)_parseURI:(id)arg1 expectedScheme:(id)arg2 identifier:(id*)arg3 options:(id*)arg4 ;
-(id)_eventWithURI:(id)arg1 checkValid:(char)arg2 ;
-(id)closestCachedOccurrenceToDate:(double)arg1 forEventUID:(int)arg2 ;
-(id)eventForUID:(id)arg1 occurrenceDate:(id)arg2 checkValid:(char)arg3 ;
-(id)eventWithUniqueId:(id)arg1 occurrenceDate:(id)arg2 ;
-(char)saveEvent:(id)arg1 span:(int)arg2 commit:(char)arg3 error:(id*)arg4 ;
-(char)removeEvent:(id)arg1 span:(int)arg2 commit:(char)arg3 error:(id*)arg4 ;
-(void)_insertObject:(id)arg1 ;
-(void)_deleteObject:(id)arg1 ;
-(id)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned)arg3 ;
-(void)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned)arg3 completion:(/*^block*/id)arg4 ;
-(char)saveReminder:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)removeReminder:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(id)calendarItemWithIdentifier:(id)arg1 ;
-(id)_calendarItemsMatchingPredicate:(id)arg1 ;
-(id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(char)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(char)arg4 completed:(char)arg5 includeDatesBefore:(char)arg6 sortOrder:(int)arg7 ;
-(id)predicateForCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(char)arg3 completed:(char)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned)arg9 ;
-(id)sharedCalendarInvitationsForEntityTypes:(unsigned)arg1 ;
-(id)remindersMatchingPredicate:(id)arg1 ;
-(char)markEventAlerted:(id)arg1 ;
-(char)markResourceChangeAlerted:(id)arg1 error:(id*)arg2 ;
-(char)markCalendarAlerted:(id)arg1 ;
-(char)markInviteReplyNotificationAlerted:(id)arg1 ;
-(id)publicObjectWithPersistentObject:(id)arg1 ;
-(char)removeResourceChanges:(id)arg1 error:(id*)arg2 ;
-(char)removeInviteReplyNotifications:(id)arg1 error:(id*)arg2 ;
-(void)_refreshDASource:(id)arg1 isUserRequested:(char)arg2 ;
-(void)refreshSourcesIfNecessary:(char)arg1 ;
-(void)_registerObjectImmediate:(id)arg1 ;
-(id)_addFetchedObjectWithID:(id)arg1 ;
-(id)calendarWithID:(id)arg1 ;
-(id)sourceWithIdentifier:(id)arg1 ;
-(void)_registerObject:(id)arg1 ;
-(void)_forgetRegisteredObjects;
-(EKDaemonConnection *)database;
-(void)_reregisterObject:(id)arg1 oldID:(id)arg2 ;
-(id)fetchEventsMatchingPredicate:(id)arg1 resultHandler:(/*^block*/id)arg2 ;
-(void)_waitOnSemaphore:(id)arg1 ;
-(id)calendarsForEntityType:(unsigned)arg1 ;
-(NSNumber *)defaultTimedAlarmOffset;
-(NSNumber *)defaultAllDayAlarmOffset;
-(void)daemonRestarted;
-(id)changesSinceSequenceNumber:(int)arg1 ;
-(NSString *)eventStoreIdentifier;
-(id)localSource;
-(id)ownedSources;
-(char)saveSource:(id)arg1 error:(id*)arg2 ;
-(char)removeSource:(id)arg1 error:(id*)arg2 ;
-(NSArray *)calendars;
-(char)hideCalendarsFromNotificationCenter:(id)arg1 error:(id*)arg2 ;
-(int)readWriteCalendarCountForEntityType:(unsigned)arg1 ;
-(id)readWriteCalendarsForEntityType:(unsigned)arg1 ;
-(char)saveCalendar:(id)arg1 error:(id*)arg2 ;
-(char)removeCalendar:(id)arg1 error:(id*)arg2 ;
-(char)deleteCalendar:(id)arg1 forEntityType:(int)arg2 error:(id*)arg3 ;
-(id)eventWithIdentifier:(id)arg1 ;
-(id)_eventOccurrenceWithURI:(id)arg1 ;
-(id)eventForUID:(id)arg1 occurrenceDate:(id)arg2 ;
-(id)eventWithUniqueId:(id)arg1 ;
-(char)saveEvent:(id)arg1 span:(int)arg2 error:(id*)arg3 ;
-(char)removeEvent:(id)arg1 span:(int)arg2 error:(id*)arg3 ;
-(char)setInvitationStatus:(unsigned)arg1 forEvent:(id)arg2 error:(id*)arg3 ;
-(char)setInvitationStatus:(unsigned)arg1 forEvents:(id)arg2 error:(id*)arg3 ;
-(id)importICS:(id)arg1 intoCalendar:(id)arg2 options:(unsigned)arg3 ;
-(CGColorRef)copyCGColorForNewCalendar;
-(EKCalendar *)defaultCalendarForNewEvents;
-(void)setDefaultCalendarForNewEvents:(EKCalendar *)arg1 ;
-(id)defaultCalendarForNewReminders;
-(void)setDefaultCalendarForNewReminders:(id)arg1 ;
-(char)saveReminder:(id)arg1 error:(id*)arg2 ;
-(char)removeReminder:(id)arg1 error:(id*)arg2 ;
-(id)reminderWithExternalURI:(id)arg1 ;
-(id)calendarItemsWithExternalIdentifier:(id)arg1 ;
-(id)insertNewReminder;
-(int)countOfRemindersMatchingPredicate:(id)arg1 ;
-(id)fetchRemindersMatchingPredicate:(id)arg1 completion:(/*^block*/id)arg2 ;
-(id)predicateForRemindersInCalendars:(id)arg1 ;
-(id)predicateForIncompleteRemindersWithDueDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3 ;
-(id)predicateForCompletedRemindersWithCompletionDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3 ;
-(id)predicateForIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForIncompleteRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForCompletedRemindersWithDueDateOrCompletionDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForAllRemindersWithDueDate:(id)arg1 calendars:(id)arg2 ;
-(id)predicateForAllRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2 ;
-(id)predicateForRemindersWithTitle:(id)arg1 calendars:(id)arg2 ;
-(id)predicateForCompletedRemindersWithCalendars:(id)arg1 ;
-(id)predicateForRemindersWithSearchTerm:(id)arg1 ;
-(id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(char)arg3 completed:(char)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 ;
-(char)fetchProperties:(id)arg1 forReminders:(id)arg2 ;
-(id)eventWithUUID:(id)arg1 ;
-(id)doEvents:(id)arg1 haveOccurrencesAfterDate:(id)arg2 ;
-(id)calendarWithExternalURI:(id)arg1 ;
-(id)insertNewEvent;
-(id)insertNewExceptionDateWithDate:(id)arg1 ;
-(char)occurrenceCacheOccurrencesAreBeingGenerated;
-(id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1 onDay:(double)arg2 ;
-(id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1 ;
-(id)scheduledTaskCacheFetchDaysAndTaskCounts;
-(id)scheduledTaskCacheFetchTasksOnDay:(id)arg1 ;
-(void)setShowDeclinedEvents:(char)arg1 ;
-(char)showDeclinedEvents;
-(id)markNotificationsAlertedAndSave:(id)arg1 ;
-(int)unacknowledgedEventCount;
-(int)notifiableEventCount;
-(id)earliestExpiringNotifiableEventEndDateAfterDate:(id)arg1 timeZone:(id)arg2 ;
-(id)resourceChangesForEntityTypes:(unsigned)arg1 ;
-(char)removeResourceChange:(id)arg1 error:(id*)arg2 ;
-(NSArray *)eventNotifications;
-(NSArray *)inboxRepliedSectionItems;
-(NSArray *)reminderNotifications;
-(id)inviteReplyNotifications;
-(char)removeInviteReplyNotification:(id)arg1 error:(id*)arg2 ;
-(void)refreshSourcesIfNecessary;
-(id)publicObjectWithObjectID:(id)arg1 ;
-(void)_trackModifiedObject:(id)arg1 ;
-(id)eventsMatchingPredicate:(id)arg1 ;
-(void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)cancelFetchRequest:(id)arg1 ;
-(id)alarmWithUUID:(id)arg1 ;
-(void)alarmOccurrencesBetweenStartDate:(id)arg1 endDate:(id)arg2 inCalendars:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)locationBasedAlarmOccurrencesWithCompletion:(/*^block*/id)arg1 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 loadDefaultProperties:(char)arg4 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 eventUUID:(id)arg3 calendars:(id)arg4 ;
-(id)predicateForNotifiableEvents;
-(id)predicateForNotificationCenterVisibleEvents;
-(id)predicateForUnacknowledgedEvents;
-(id)predicateForUnalertedEvents;
-(id)predicateForUpcomingEventsWithLimit:(int)arg1 ;
-(id)predicateForMasterEventsInCalendars:(id)arg1 ;
-(id)predicateForTravelEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 ;
-(id)predicateForEventsWithStartDate:(id)arg1 title:(id)arg2 source:(id)arg3 ;
-(id)predicateForEventCreatedFromSuggestionWithOpaqueKey:(id)arg1 ;
-(void)_protectedDataDidBecomeAvailable;
-(char)registerForDetailedChangeTracking:(id*)arg1 ;
-(void)fetchChangedObjectIDsSinceToken:(int)arg1 resultHandler:(/*^block*/id)arg2 ;
-(void)markChangedObjectIDsConsumedUpToToken:(int)arg1 ;
-(void)setDefaultTimedAlarmOffset:(NSNumber *)arg1 ;
-(EKAlarm *)defaultTimedAlarm;
-(void)setDefaultAllDayAlarmOffset:(NSNumber *)arg1 ;
-(EKAlarm *)defaultAllDayAlarm;
-(void)cacheValidationStatusForEmail:(id)arg1 status:(int)arg2 ;
-(int)emailAddressValidationStatus:(id)arg1 ;
-(char)moveDiagnosticsLogToCrashReporterFolder;
-(void)setRegisteredObjects:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)publicRegisteredObjects;
-(void)setPublicRegisteredObjects:(NSMutableDictionary *)arg1 ;
-(EKCalendar *)_defaultCalendarForNewEvents;
-(EKCalendar *)_defaultCalendarForNewReminders;
-(void)setDatabase:(EKDaemonConnection *)arg1 ;
-(double)lastDatabaseNotificationTimestamp;
-(void)setLastDatabaseNotificationTimestamp:(double)arg1 ;
-(void)setFlags:(unsigned long)arg1 ;
-(NSMutableDictionary *)_calendars;
-(void)set_calendars:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)_sources;
-(void)set_sources:(NSMutableDictionary *)arg1 ;
-(NSMutableSet *)objectsPendingCommit;
-(void)setObjectsPendingCommit:(NSMutableSet *)arg1 ;
-(NSObject*<OS_dispatch_queue>)calendarQueue;
-(void)setCalendarQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)registeredQueue;
-(void)setRegisteredQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)unsavedChangesQueue;
-(void)setUnsavedChangesQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)dbChangedQueue;
-(void)setDbChangedQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSMutableDictionary *)_cachedValidatedEmails;
-(void)set_cachedValidatedEmails:(NSMutableDictionary *)arg1 ;
-(void)dealloc;
-(id)init;
-(void)setTimeZone:(NSTimeZone *)arg1 ;
-(void)reset;
-(NSTimeZone *)timeZone;
-(EKDaemonConnection *)connection;
-(void)setSourceAccountManagement:(int)arg1 ;
-(id)calendarWithIdentifier:(id)arg1 ;
-(unsigned long)flags;
-(id)sources;
-(int)sequenceNumber;
-(void)rollback;
-(id)objectWithObjectID:(id)arg1 ;
-(NSMutableDictionary *)registeredObjects;
-(NSMutableSet *)insertedObjects;
-(NSMutableSet *)updatedObjects;
-(NSMutableSet *)deletedObjects;
-(oneway void)release;
@end

