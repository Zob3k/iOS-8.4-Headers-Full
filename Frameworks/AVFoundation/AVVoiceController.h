/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:36:13 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/Frameworks/AVFoundation.framework/libAVFAudio.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <libAVFAudio.dylib/libAVFAudio.dylib-Structs.h>
@class NSString, NSDictionary;

@interface AVVoiceController : NSObject {

	void* _impl;

}

@property (getter=isBargeInDetectEnabled) char bargeInDetectEnabled; 
@property (getter=isStopOnBargeInEnabled) char stopOnBargeInEnabled; 
@property (copy,readonly) NSString * recordRoute; 
@property (readonly) unsigned long long lastRecordStartTime; 
@property (readonly) NSDictionary * voiceTriggerInfo; 
@property (getter=isSynchronousCallbackEnabled) char synchronousCallbackEnabled; 
@property (readonly) NSDictionary * recordSettings; 
@property (getter=isRecording,readonly) char recording; 
@property (retain) id<Endpointer> endpointerDelegate; 
@property (assign) int recordEndpointMode; 
@property (assign) double recordStartWaitTime; 
@property (assign) double recordInterspeechWaitTime; 
@property (assign) double recordEndWaitTime; 
@property (assign) id<AVVoiceControllerRecordDelegate> recordDelegate; 
@property (getter=isMeteringEnabled) char meteringEnabled; 
@property (readonly) NSDictionary * playbackSettings; 
@property (getter=isPlaying,readonly) char playing; 
@property (assign) id<AVVoiceControllerPlaybackDelegate> playbackDelegate; 
@property (assign) float playbackVolume; 
@property (getter=isStopOnEndpointEnabled) char stopOnEndpointEnabled; 
@property (assign) float alertVolume; 
-(char)isRecording;
-(void)handleInterruption:(id)arg1 ;
-(void)handleRouteChange:(id)arg1 ;
-(void)handleMediaServerDeath:(id)arg1 ;
-(void)handleMediaServerReset:(id)arg1 ;
-(ControllerImpl*)impl;
-(void)setSessionNotifications;
-(void)removeSessionNotifications;
-(void)hardwareConfigChanged;
-(void)beganRecording;
-(void)recordBufferReceived:(MyAudioQueueBuffer*)arg1 ;
-(void)finishedRecording;
-(void)startpointDetected;
-(void)interspeechPointDetected;
-(void)endpointDetected;
-(void)encodeError;
-(void)beganPlaying;
-(void)playbackBufferReceived:(MyAudioQueueBuffer*)arg1 ;
-(void)finishedPlaying;
-(void)decodeError;
-(void)beginRecordInterruption;
-(void)endRecordInterruption;
-(void)beginPlaybackInterruption;
-(void)endPlaybackInterruption;
-(NSString *)recordRoute;
-(unsigned long long)lastRecordStartTime;
-(NSDictionary *)voiceTriggerInfo;
-(char)isBargeInDetectEnabled;
-(void)setBargeInDetectEnabled:(char)arg1 ;
-(char)isStopOnBargeInEnabled;
-(void)setStopOnBargeInEnabled:(char)arg1 ;
-(char)isSynchronousCallbackEnabled;
-(void)setSynchronousCallbackEnabled:(char)arg1 ;
-(void)prewarmAudioSession;
-(char)willAcceptContext:(id)arg1 ;
-(char)startRecording:(id*)arg1 ;
-(char)preparePlaybackWithSettings:(id)arg1 error:(id*)arg2 ;
-(char)preparePlaybackFromURL:(id)arg1 error:(id*)arg2 ;
-(void)stopPlaying;
-(id<AVVoiceControllerRecordDelegate>)recordDelegate;
-(double)getRecordBufferDuration;
-(id<Endpointer>)endpointerDelegate;
-(int)recordEndpointMode;
-(double)recordStartWaitTime;
-(double)recordInterspeechWaitTime;
-(void)setRecordInterspeechWaitTime:(double)arg1 ;
-(double)recordEndWaitTime;
-(id<AVVoiceControllerPlaybackDelegate>)playbackDelegate;
-(void)setPlaybackDelegate:(id<AVVoiceControllerPlaybackDelegate>)arg1 ;
-(NSDictionary *)playbackSettings;
-(double)getPlaybackBufferDuration;
-(char)setPlaybackBufferDuration:(double)arg1 ;
-(void)setAlertVolume:(float)arg1 ;
-(float)alertVolume;
-(void)setPlaybackVolume:(float)arg1 ;
-(float)playbackVolume;
-(char)isMeteringEnabled;
-(float)peakPowerForChannel:(unsigned)arg1 ;
-(char)isStopOnEndpointEnabled;
-(void)setStopOnEndpointEnabled:(char)arg1 ;
-(void)dealloc;
-(void)stopRecording;
-(id)initWithContext:(id)arg1 error:(id*)arg2 ;
-(void)setRecordDelegate:(id<AVVoiceControllerRecordDelegate>)arg1 ;
-(void)setMeteringEnabled:(char)arg1 ;
-(char)setAlertSoundFromURL:(id)arg1 forType:(int)arg2 ;
-(char)setRecordBufferDuration:(double)arg1 ;
-(void)setRecordStartWaitTime:(double)arg1 ;
-(void)setRecordEndWaitTime:(double)arg1 ;
-(void)setRecordEndpointMode:(int)arg1 ;
-(void)setEndpointerDelegate:(id<Endpointer>)arg1 ;
-(char)setCurrentContext:(id)arg1 error:(id*)arg2 ;
-(NSDictionary *)recordSettings;
-(char)prepareRecordWithSettings:(id)arg1 error:(id*)arg2 ;
-(char)startRecording;
-(char)playAlertSoundForType:(int)arg1 ;
-(void)releaseAudioSession:(unsigned)arg1 ;
-(void)updateMeters;
-(float)averagePowerForChannel:(unsigned)arg1 ;
-(void)releaseAudioSession;
-(char)startPlaying;
-(void)finalize;
-(char)isPlaying;
@end

