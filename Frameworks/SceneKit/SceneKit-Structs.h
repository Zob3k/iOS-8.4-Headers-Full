/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:37:58 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/Frameworks/SceneKit.framework/SceneKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@class SCNPhysicsBody;

typedef struct _NSZone* NSZoneRef;

typedef struct SCNVector3 {
	float x;
	float y;
	float z;
} SCNVector3;

typedef struct {
	SCNPhysicsBody* bodyA;
	SCNPhysicsBody* bodyB;
	SCNVector3 anchorA;
	SCNVector3 anchorB;
	SCNVector3 axisA;
	SCNVector3 axisB;
} SCD_Struct_SC2;

typedef struct {
	id field1;
	CGPoint field2;
	CGPoint field3;
	SCNVector3 field4;
	SCNVector3 field5;
	float field6;
} SCD_Struct_SC3;

typedef union C3DMatrix4x4 {
	float components[16];
	[4 m];
} C3DMatrix4x4;

typedef struct {
	unsigned short selectedAxis;
	 originalPosition;
	 axisDirection;
	 mouseDeltaVector;
} SCD_Struct_SC5;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct _C3DQuaternion {
	float x;
	float y;
	float z;
	float s;
} C3DQuaternion;

typedef struct {
	unsigned short selectedAxis;
	CGPoint originalMouseLocation;
	float rotationSign;
	C3DQuaternion originalRotation;
} SCD_Struct_SC8;

typedef union {
	SCD_Struct_SC5 axisMove;
	SCD_Struct_SC5 planeMove;
	SCD_Struct_SC8 axisRotate;
} SCD_Union_SC9;

typedef struct {
	id field1;
	SCNVector3 field2;
	SCNVector3 field3;
	CGPoint field4;
	CGPoint field5;
	float field6;
} SCD_Struct_SC10;

typedef struct __C3DFXTechnique* C3DFXTechniqueRef;

typedef struct __C3DScene* C3DSceneRef;

typedef struct {
	SCNPhysicsBody* characterBody;
	SCNVector3 direction;
	float velocity;
	float jumpSpeed;
} SCD_Struct_SC13;

typedef struct SCNVector4 {
	float x;
	float y;
	float z;
	float w;
} SCNVector4;

typedef struct _compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *> > {
	c3dPhysicsField __first_;
} compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *> >;

typedef struct vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *> > {
	c3dPhysicsField __begin_;
	c3dPhysicsField __end_;
	compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *> > __end_cap_;
} vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *> >;

typedef struct c3dAether {
	vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *> > _fields;
} c3dAether;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct __C3DMaterial* C3DMaterialRef;

typedef struct __C3DParticleSystem* C3DParticleSystemRef;

typedef struct SCNMatrix4 {
	float m11;
	float m12;
	float m13;
	float m14;
	float m21;
	float m22;
	float m23;
	float m24;
	float m31;
	float m32;
	float m33;
	float m34;
	float m41;
	float m42;
	float m43;
	float m44;
} SCNMatrix4;

typedef struct __C3DLibrary* C3DLibraryRef;

typedef struct {
	__C3DFramebuffer frameBuffer;
	__C3DFramebuffer multisamplingFrameBuffer;
	CGSize drawableSize;
} SCD_Struct_SC23;

typedef struct C3DColor4 {
	/*function pointer*/void* ;
	float rgba[4];
	C3DQuaternion) ;
} C3DColor4;

typedef struct __C3DEngineContext* C3DEngineContextRef;

typedef struct CGImage* CGImageRef;

typedef struct __C3DSceneSource* C3DSceneSourceRef;

typedef struct __C3DHitTestResult* C3DHitTestResultRef;

typedef struct __CFArray* CFArrayRef;

typedef struct __C3DImage* C3DImageRef;

typedef struct __C3DTextureProxy* C3DTextureProxyRef;

typedef struct __C3DSkinner* C3DSkinnerRef;

typedef struct {
	SCNPhysicsBody* bodyA;
	SCNPhysicsBody* bodyB;
	SCNVector3 anchorA;
	SCNVector3 anchorB;
} SCD_Struct_SC33;

typedef struct __C3DFXGLSLProgram* C3DFXGLSLProgramRef;

typedef struct {
	unsigned vbo;
	unsigned ibo;
	unsigned baseIndex;
	unsigned baseVertex;
	unsigned vertexSize;
	unsigned allocatedVerticesSize;
	unsigned allocatedIndicesSize;
} SCD_Struct_SC35;

typedef struct {
	__C3DFXGLSLProgram weakProgram;
	SCD_Struct_SC35 dynamicVBOInfo;
	unsigned textureID;
	unsigned vao;
	unsigned drawMode;
	BOOL orthographic;
	BOOL clearDepthBuffer;
	BOOL enableDepthTest;
	BOOL enableCulling;
	BOOL isDynamic;
} SCD_Struct_SC36;

typedef struct {
	unsigned textureID;
	CGSize textureSize;
	BOOL isRetina;
} SCD_Struct_SC37;

typedef struct {
	SCD_Struct_SC37 textureInfo;
	float lineHeight;
	short characterWidth_texture;
	float characterWidth_typography;
	short characterHeight_texture;
	/*function pointer*/void* symbolRects;
} SCD_Struct_SC38;

typedef struct _C3DRendererContextStats {
	unsigned verticesProcessed;
	unsigned primitivesProcessed;
	unsigned drawCount;
	unsigned drawStep;
	unsigned frameCount;
	unsigned fboSwitches;
	unsigned vboSwitches;
	unsigned attSwitches;
	unsigned attEnabling;
	unsigned iboSwitches;
	unsigned vaoSwitches;
	unsigned prgSwitches;
	unsigned texSwitches;
	unsigned rssSwitches;
	unsigned getCount;
	unsigned uniformFloatSent;
	unsigned uniformIntSent;
	unsigned uniformVector2Sent;
	unsigned uniformVector3Sent;
	unsigned uniformVector4Sent;
	unsigned uniformMatrix4Sent;
	unsigned vboUploaded;
	unsigned iboUploaded;
	unsigned texUploaded;
	double cpuTime;
	double cstrTime;
	double phyTime;
	double prtTime;
	double animTime;
	double syncTime;
	double cullTime;
	double liteTime;
	double sortTime;
	double twoDTime;
	double delegateTime;
	double glFlushTime;
	double waitDisplayLinkTime;
	double lastDisplayLinkTime;
	unsigned prgCount;
	unsigned texCount;
	unsigned fboCount;
	unsigned vboCount;
	unsigned rboCount;
	unsigned iboCount;
	unsigned vaoCount;
	unsigned fboMemory;
	unsigned rboMemory;
	unsigned vboMemory;
	unsigned iboMemory;
	unsigned texMemory;
	unsigned backBufferMemory;
	unsigned depthBuffersMemory;
	double frmAvgTime;
	double frmMinTime;
	double frmMaxTime;
	double frameTimeHistory[60];
	unsigned frameTimeCurrentIndex;
	double startTime;
	double lastFrameTime;
} C3DRendererContextStats;

typedef struct {
	BOOL initialized;
	BOOL showFullStatistics;
	float fps;
	float waitDisplayLinkTime;
	int pressedButtonIndex;
	__CFString fpsString;
	__CFString shortString;
	unsigned lightingStatistics[9];
	C3DRendererContextStats stats;
} SCD_Struct_SC40;

typedef struct C3DSphere {
	 vector;
} C3DSphere;

typedef struct __C3DNode* C3DNodeRef;

typedef struct __C3DTexture* C3DTextureRef;

typedef struct __C3DImageProxy* C3DImageProxyRef;

typedef struct __C3DFramebuffer* C3DFramebufferRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct {
	SCNPhysicsBody* bodyA;
	SCNPhysicsBody* bodyB;
	SCNVector3 axisA;
	SCNVector3 anchorA;
	SCNVector3 axisB;
	SCNVector3 anchorB;
	float minLinearLimit;
	float maxLinearLimit;
	float minAngularLimit;
	float maxAngularLimit;
	float motorTargetLinearVelocity;
	float motorMaximumForce;
	float motorTargetAngularVelocity;
	float motorMaximumTorque;
} SCD_Struct_SC47;

typedef struct __C3DFXGLSLProfile* C3DFXGLSLProfileRef;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	char field1;
	float field2;
	float field3;
	long field4;
	float field5;
	void field6;
	void field7;
} SCD_Struct_SC50;

typedef struct {
	SCD_Struct_SC5 field1;
	0 field2;
	void field3;
	void field4;
	long field5;
	long field6;
	BOOL field7;
	BOOL field8;
	CGRect field9;
	float field10;
} SCD_Struct_SC51;

typedef struct __C3DLOD* C3DLODRef;

