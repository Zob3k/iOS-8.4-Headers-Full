/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:37:58 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/Frameworks/SceneKit.framework/SceneKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <SceneKit/SceneKit-Structs.h>
#import <SceneKit/SCNEventHandler.h>

@class SCNNode, UIGestureRecognizer;

@interface SCNCameraControlEventHandler : SCNEventHandler {

	id _dReserved;
	SCNNode* _freeViewCameraNode;
	CGPoint _initialPoint;
	C3DMatrix4x4 _initialMatrix;
	float _initialZoom;
	float _savedZfar;
	float _savedZnear;
	float _originalFovX;
	float _originalFovY;
	float _originalOrthoScale;
	float _zoomFactor;
	 _clickOrigin;
	int _lastGestureFingerCount;
	char _isDraggingWithOneFinger;
	float _roll;
	C3DMatrix4x4 _initialMatrixForRoll;
	UIGestureRecognizer* _pressGesture;
	UIGestureRecognizer* _tapGesture;
	UIGestureRecognizer* _pinchGesture;
	UIGestureRecognizer* _panGesture;
	UIGestureRecognizer* _rotateGesture;
	int _stickyAxis;
	C3DSphere _viewedObjectSphere;
	unsigned _hasCheckedIfViewingAnObject : 1;
	unsigned _isViewingAnObject : 1;
	unsigned _isViewedObjectSphereComputed : 1;
	unsigned _automaticCameraTarget : 1;
	unsigned _inertia : 1;
	unsigned _alternateMode : 1;
	unsigned _upDirIsSet : 1;
	unsigned _gimbalLockMode : 1;
	unsigned _inertiaRunning : 1;
	int _mode;
	SCNVector3 _gimbalLockVector;
	 _upDir;
	SCNVector3 _cameraTarget;
	float _friction;
	CGPoint _totalDragWithInertia;
	CGPoint _inertiaVelocity;
	double _lastSimulationTime;

}

@property (assign) char gimbalLockMode; 
@property (assign) SCNVector3 gimbalLockVector; 
@property (assign) char enableInertia; 
@property (assign) float friction; 
@property (assign) char automaticCameraTarget; 
@property (assign) SCNVector3 cameraTarget; 
@property (assign) int stickyAxis; 
-(void)sceneWillChange;
-(void)sceneDidChange;
-(void)cameraWillChange;
-(void)cameraDidChange;
-(void)setEnableInertia:(char)arg1 ;
-(char)wantsRedraw;
-(void)updateCameraTargetIfNeeded;
-(char)_freeCameraActivated;
-(void)_prepareFreeViewCamera;
-(void)_installFreeViewCameraIfNeeded;
-(C3DSphereRef)viewedObjectSphere;
-(void)_switchToFreeViewCamera;
-(void)zoomBy:(float)arg1 animate:(char)arg2 ;
-(float)_translationCoef;
-(void)_resetFreeViewCamera;
-(void)_stopInertiaIfNeeded;
-(void)_rotateWithDrag:(CGPoint)arg1 mode:(int)arg2 stickyAxis:(int)arg3 ;
-(void)_onInertiaTimer;
-(char)computeBoundingSphereOmittingFloorsForNode:(C3DNodeRef)arg1 sphere:(C3DSphereRef)arg2 ;
-(8)frontVector;
-(SCNVector3)cameraTarget;
-(SCNVector3)gimbalLockVector;
-(void)_handlePinch:(id)arg1 ;
-(void)_handlePan:(id)arg1 ;
-(void)_handlePress:(id)arg1 ;
-(void)_handleRotation:(id)arg1 ;
-(void)_handleDoubleTap:(id)arg1 ;
-(void)beginGesture:(id)arg1 ;
-(void)pinchWithGestureRecognizer:(id)arg1 ;
-(void)panWithGestureRecognizer:(id)arg1 ;
-(void)rotateWithGestureRecognizer:(id)arg1 ;
-(void)_startBrowsingIfNeeded:(CGPoint)arg1 ;
-(void)_beginTranslateAtLocation:(CGPoint)arg1 ;
-(void)setZoomFactor:(float)arg1 ;
-(void)endDraggingWithVelocity:(CGPoint)arg1 ;
-(void)_translateTo:(CGPoint)arg1 ;
-(char)enableInertia;
-(char)gimbalLockMode;
-(void)setGimbalLockMode:(char)arg1 ;
-(void)setGimbalLockVector:(SCNVector3)arg1 ;
-(char)automaticCameraTarget;
-(void)setAutomaticCameraTarget:(char)arg1 ;
-(void)setCameraTarget:(SCNVector3)arg1 ;
-(int)stickyAxis;
-(void)setStickyAxis:(int)arg1 ;
-(char)isViewingAnObject;
-(void)rotateOf:(float)arg1 ;
-(void)zoomBy:(float)arg1 ;
-(float)zoomFactor;
-(void)translateByX:(float)arg1 Y:(float)arg2 Z:(float)arg3 ;
-(void)rotateWithVector:(int)arg1 ;
-(void)dealloc;
-(id)init;
-(char)gestureRecognizerShouldBegin:(id)arg1 ;
-(char)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2 ;
-(id)gestureRecognizers;
-(void)setFriction:(float)arg1 ;
-(float)friction;
-(void)viewWillDraw;
@end

