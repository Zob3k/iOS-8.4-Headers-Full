/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:37:37 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MediaPlayer/MPQueueFeederDelegate.h>
#import <MediaPlayer/MPAVQueueCoordinatorDataSource.h>
#import <MediaPlayer/MPQueueBehaviorManaging.h>
#import <MediaPlayer/NSCoding.h>

@protocol MPAVPlaylistManagerDelegate;
@class NSString, MPAVItem, MPQueuePlayer, MPQueueFeeder, MPAVQueueCoordinator, MPAVController;

@interface MPAVPlaylistManager : NSObject <MPQueueFeederDelegate, MPAVQueueCoordinatorDataSource, MPQueueBehaviorManaging, NSCoding> {

	NSString* _audioSessionModeOverride;
	MPAVItem* _currentItem;
	char _goToTargetIndex;
	int _lastSelectionDirection;
	MPQueuePlayer* _player;
	MPQueueFeeder* _playlistFeeder;
	int _repeatMode;
	int _targetIndex;
	char _updatedAudioSessionMode;
	char _changingPlayer;
	char _changingPlaylistFeeder;
	int _playbackMode;
	MPAVQueueCoordinator* _queueCoordinator;
	id<MPAVPlaylistManagerDelegate> _delegate;
	MPAVController* _avController;

}

@property (readonly) MPQueuePlayer * player;                                                             //@synthesize player=_player - In the implementation block
@property (readonly) MPAVQueueCoordinator * queueCoordinator;                                            //@synthesize queueCoordinator=_queueCoordinator - In the implementation block
@property (assign,nonatomic,__weak) id<MPAVPlaylistManagerDelegate> delegate;                            //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) MPQueueFeeder * playlistFeeder;                                           //@synthesize playlistFeeder=_playlistFeeder - In the implementation block
@property (getter=isChangingPlayer,nonatomic,readonly) char changingPlayer;                              //@synthesize changingPlayer=_changingPlayer - In the implementation block
@property (getter=isChangingPlaylistFeeder,nonatomic,readonly) char changingPlaylistFeeder;              //@synthesize changingPlaylistFeeder=_changingPlaylistFeeder - In the implementation block
@property (readonly) MPAVItem * currentItem;                                                             //@synthesize currentItem=_currentItem - In the implementation block
@property (readonly) int currentIndex; 
@property (assign) int repeatMode; 
@property (nonatomic,retain) NSString * audioSessionModeOverride;                                        //@synthesize audioSessionModeOverride=_audioSessionModeOverride - In the implementation block
@property (assign,nonatomic,__weak) MPAVController * avController;                                       //@synthesize avController=_avController - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) char allowsUserVisibleUpcomingItems; 
@property (nonatomic,readonly) char canSeek; 
@property (nonatomic,readonly) char canSkipToPreviousItem; 
@property (nonatomic,readonly) int playbackMode;                                                         //@synthesize playbackMode=_playbackMode - In the implementation block
@property (nonatomic,readonly) char userCanChangeShuffleAndRepeatType; 
-(int)repeatMode;
-(void)setRepeatMode:(int)arg1 ;
-(int)playbackMode;
-(NSString *)audioSessionModeOverride;
-(void)setAudioSessionModeOverride:(NSString *)arg1 ;
-(void)reloadWithPlaybackContext:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)queueFeeder:(id)arg1 didChangeContentsWithPreferredStartIndex:(unsigned)arg2 error:(id)arg3 ;
-(char)canSkipItem:(id)arg1 ;
-(char)allowsUserVisibleUpcomingItems;
-(char)canSkipToPreviousItem;
-(char)userCanChangeShuffleAndRepeatType;
-(MPQueueFeeder *)playlistFeeder;
-(void)setCurrentIndex:(int)arg1 selectionDirection:(int)arg2 ;
-(int)playlistIndexWithDelta:(int)arg1 fromIndex:(int)arg2 ignoreElapsedTime:(char)arg3 ;
-(void)clearQueueFeeder;
-(void)reloadItemsKeepingCurrentItem:(char)arg1 ;
-(int)playlistIndexOfItemIdentifier:(id)arg1 ;
-(char)isChangingPlayer;
-(char)isChangingPlaylistFeeder;
-(void)connectPlayer;
-(void)disconnectPlayer;
-(MPAVQueueCoordinator *)queueCoordinator;
-(void)setAvController:(MPAVController *)arg1 ;
-(void)queueCoordinator:(id)arg1 failedToLoadItem:(id)arg2 ;
-(id)queueCoordinator:(id)arg1 itemToFollowItem:(id)arg2 ;
-(unsigned)displayIndexForItem:(id)arg1 ;
-(id)playlistFeederForPlaylistIndex:(int)arg1 ;
-(id)itemForPlaylistIndex:(int)arg1 ;
-(unsigned)displayCountForItem:(id)arg1 ;
-(void)_awakeFromCoder:(id)arg1 ;
-(int)playlistIndexOfIndex:(int)arg1 inPlaylistFeeder:(id)arg2 ;
-(void)_setStateForPlaylistFeeder:(id)arg1 startIndex:(unsigned)arg2 ;
-(void)_streamingDownloadSessionControllerDidFailDownloadSessionNotification:(id)arg1 ;
-(void)_storePlayWhileDownloadControllerDidFinishPlayWhileDownloadSessionNotification:(id)arg1 ;
-(void)_mediaLibraryDisplayValuesDidChangeNotification:(id)arg1 ;
-(MPAVController *)avController;
-(void)player:(id)arg1 currentItemDidChangeFromItem:(id)arg2 toItem:(id)arg3 ;
-(char)setPlaylistFeeder:(id)arg1 startIndex:(int)arg2 keepPlaying:(char)arg3 ;
-(void)_handleDownloadCancelledForDownloadToken:(unsigned long long)arg1 ;
-(void)_reloadQueuedItemsIfPathBecameAvailable;
-(int)_prepareToQueuePlaybackIndex:(int)arg1 selectionDirection:(int)arg2 ;
-(void)_notifyQueueFeederContentsChanged;
-(unsigned)_playbackIndexForDelta:(int)arg1 fromIndex:(unsigned)arg2 ignoreElapsedTime:(char)arg3 ;
-(void)_updateAudioSessionModeWithIndex:(unsigned)arg1 ;
-(void)_willFinishReloadWithQueueFeeder:(id)arg1 fromPlaybackContext:(id)arg2 ;
-(char)canChangePlaylistFeeder;
-(id)_queuePlayerFeederItemForIndex:(int)arg1 ;
-(int)_nextItemIndex:(int)arg1 repeatMode:(int)arg2 ;
-(id)_itemToFollowItemIndex:(int)arg1 skipUnavailableContent:(char)arg2 ;
-(id)metadataItemForPlaylistIndex:(int)arg1 ;
-(int)playlistIndexOfItem:(id)arg1 ;
-(int)playlistIndexOfQueueIdentifier:(id)arg1 inPlaylistFeeder:(id)arg2 ;
-(void)updateForSoundCheckDefaultsChange;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)setDelegate:(id<MPAVPlaylistManagerDelegate>)arg1 ;
-(id)init;
-(id<MPAVPlaylistManagerDelegate>)delegate;
-(int)currentIndex;
-(MPAVItem *)currentItem;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(MPQueuePlayer *)player;
-(char)canSeek;
@end

