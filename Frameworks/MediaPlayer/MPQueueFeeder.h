/*
* This header is generated by classdump-dyld 0.7
* on Sunday, July 5, 2015 at 9:37:33 PM Eastern Daylight Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MediaPlayer/MediaPlayer-Structs.h>
#import <MediaPlayer/MPQueueBehaviorManaging.h>
#import <MediaPlayer/NSCoding.h>

@protocol MPQueueFeederDelegate;
@class NSMutableDictionary, MPUContentItemIdentifierCollection, NSString, NSData;

@interface MPQueueFeeder : NSObject <MPQueueBehaviorManaging, NSCoding> {

	unsigned _repeatType;
	unsigned _shuffleType;
	NSMutableDictionary* _nextStartTimes;
	char _requiresQueueChangeVerification;
	id<MPQueueFeederDelegate> _delegate;
	unsigned _state;
	unsigned _activeShuffleType;
	SCD_Struct_MP10 _skipLimit;

}

@property (nonatomic,readonly) MPUContentItemIdentifierCollection * MPU_contentItemIdentifierCollection; 
@property (setter=mpuReporting_setFeatureName:,nonatomic,copy) NSString * mpuReporting_featureName; 
@property (setter=mpuReporting_setRecommendationData:,nonatomic,copy) NSData * mpuReporting_recommendationData; 
@property (assign,nonatomic,__weak) id<MPQueueFeederDelegate> delegate;                                                      //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) unsigned state;                                                                                 //@synthesize state=_state - In the implementation block
@property (assign,nonatomic) char requiresQueueChangeVerification;                                                           //@synthesize requiresQueueChangeVerification=_requiresQueueChangeVerification - In the implementation block
@property (nonatomic,readonly) unsigned itemCount; 
@property (nonatomic,readonly) Class itemClass; 
@property (nonatomic,readonly) char canReorder; 
@property (nonatomic,readonly) char playerPreparesItemsForPlaybackAsynchronously; 
@property (assign,nonatomic) SCD_Struct_MP10 skipLimit;                                                                      //@synthesize skipLimit=_skipLimit - In the implementation block
@property (nonatomic,readonly) char trackChangesCanEndPlayback; 
@property (nonatomic,readonly) unsigned realRepeatType; 
@property (nonatomic,readonly) unsigned realShuffleType; 
@property (assign,nonatomic) unsigned repeatType;                                                                            //@synthesize repeatType=_repeatType - In the implementation block
@property (assign,nonatomic) unsigned shuffleType;                                                                           //@synthesize shuffleType=_shuffleType - In the implementation block
@property (assign,nonatomic) unsigned activeShuffleType;                                                                     //@synthesize activeShuffleType=_activeShuffleType - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) char allowsUserVisibleUpcomingItems; 
@property (nonatomic,readonly) char canSeek; 
@property (nonatomic,readonly) char canSkipToPreviousItem; 
@property (nonatomic,readonly) int playbackMode; 
@property (nonatomic,readonly) char userCanChangeShuffleAndRepeatType; 
+(char)supportsStateRestoration;
-(MPUContentItemIdentifierCollection *)MPU_contentItemIdentifierCollection;
-(void)mpuReporting_setRecommendationData:(id)arg1 ;
-(void)mpuReporting_setFeatureName:(id)arg1 ;
-(NSString *)mpuReporting_featureName;
-(NSData *)mpuReporting_recommendationData;
-(int)playbackMode;
-(unsigned)indexOfItemWithIdentifier:(id)arg1 ;
-(id)copyRawItemAtIndex:(unsigned)arg1 ;
-(id)playbackInfoForIdentifier:(id)arg1 ;
-(id)pathAtIndex:(unsigned)arg1 ;
-(id)identifierAtIndex:(unsigned)arg1 ;
-(void)reloadWithPlaybackContext:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(id)localizedAttributedPositionInPlaylistStringForItem:(id)arg1 withRegularTextAttributes:(id)arg2 emphasizedTextAttributes:(id)arg3 ;
-(id)localizedPositionInPlaylistString:(id)arg1 ;
-(unsigned)repeatType;
-(unsigned)shuffleType;
-(id)itemForIndex:(unsigned)arg1 ;
-(char)hasValidItemAtIndex:(unsigned)arg1 ;
-(id)itemForIdentifier:(id)arg1 ;
-(void)contentsDidChangeWithPreferredStartIndex:(unsigned)arg1 error:(id)arg2 ;
-(char)_canPurgeNextStartTimes;
-(char)canSkipItem:(id)arg1 ;
-(char)allowsUserVisibleUpcomingItems;
-(char)canSkipToPreviousItem;
-(char)userCanChangeShuffleAndRepeatType;
-(char)shouldReuseQueueFeederForPlaybackContext:(id)arg1 ;
-(void)setNextStartTime:(double)arg1 forIndentifier:(id)arg2 ;
-(void)shuffleItemsWithAnchor:(unsigned*)arg1 ;
-(id)errorResolverForItem:(id)arg1 ;
-(char)shouldBeginPlaybackOfItem:(id)arg1 error:(id*)arg2 ;
-(char)canReorder;
-(unsigned)itemTypeForIndex:(unsigned)arg1 ;
-(char)playerPreparesItemsForPlaybackAsynchronously;
-(SCD_Struct_MP10)skipLimit;
-(char)trackChangesCanEndPlayback;
-(unsigned)realRepeatType;
-(unsigned)realShuffleType;
-(id)audioSessionModeForItemAtIndex:(unsigned)arg1 ;
-(char)hasItemForIndex:(unsigned)arg1 ;
-(unsigned)initialPlaybackQueueDepthForStartingIndex:(unsigned)arg1 ;
-(id)metadataItemForIdentifier:(id)arg1 ;
-(unsigned)indexOfMediaItem:(id)arg1 ;
-(id)mediaItemAtIndex:(unsigned)arg1 ;
-(void)contentsDidChangeWithPreferredStartIndex:(unsigned)arg1 ;
-(void)player:(id)arg1 currentItemWillChangeFromItem:(id)arg2 ;
-(void)player:(id)arg1 currentItemDidChangeToItem:(id)arg2 ;
-(char)player:(id)arg1 shouldContinuePlaybackForNetworkType:(int)arg2 returningError:(id*)arg3 ;
-(char)requiresQueueChangeVerification;
-(void)setRequiresQueueChangeVerification:(char)arg1 ;
-(void)setSkipLimit:(SCD_Struct_MP10)arg1 ;
-(void)setRepeatType:(unsigned)arg1 ;
-(void)setShuffleType:(unsigned)arg1 ;
-(unsigned)activeShuffleType;
-(void)setActiveShuffleType:(unsigned)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)setDelegate:(id<MPQueueFeederDelegate>)arg1 ;
-(id<MPQueueFeederDelegate>)delegate;
-(unsigned)state;
-(void)setState:(unsigned)arg1 ;
-(Class)itemClass;
-(id)preferredLanguages;
-(unsigned)itemCount;
-(char)canSeek;
@end

